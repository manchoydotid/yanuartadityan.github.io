<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
<title type="text">Mirkwood Ape</title>
<generator uri="https://github.com/jekyll/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="/feed.xml" />
<link rel="alternate" type="text/html" href="" />
<updated>2017-10-09T01:37:53+02:00</updated>
<id>/</id>
<author>
  <name>Janu Aditya</name>
  <uri>/</uri>
  <email>yanuart.adityan@gmail.com</email>
</author>


  

<entry>
  <title type="html"><![CDATA[Finally!]]></title>
  <link rel="alternate" type="text/html" href="/blog/finally/" />
  <id>/blog/finally</id>
  <published>2017-08-26T00:00:00+02:00</published>
  <updated>2017-08-26T00:00:00+02:00</updated>
  <author>
    <name>Janu Aditya</name>
    <uri></uri>
    <email>yanuart.adityan@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;30 Juli 2017.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;30-07-2017&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;20170730&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Setelah berpacaran sekitar 2 tahun, akhirnya gw melepas masa lajang di umur 29 tahun setelah menikahi Nesia Anindita. Tanpa banyak rencana seperti kebanyakan orang, tanpa berpikir luar biasa cermatnya, tekad akhirnya terbulatkan untuk segera merintis keluarga bersama dia. Proses pernikahan berjalan sederhana tapi lancar, kecil tapi dipenuhi orang-orang dan keluarga terdekat, tenang tapi khidmat, serta riweh tapi lega akhirnya.&lt;/p&gt;

&lt;p&gt;Acara pernikahan berlangsung dua kali (seperti biasa di adat Jawa), satu di Jakarta dan satu di Madiun dengan 7 hari jeda diantaranya. Rasanya capek tapi beneran lega setelah melalui semuanya. Gilaaaaa capek banget, bahkan yang niatnya jalan-jalan seneng-seneng di 7 hari ini, isinya hanya &lt;em&gt;Game of Thrones&lt;/em&gt; dan jalan-jalan makan-makan tidur-tiduran &amp;lt;3. Untuk yang terakhir ini, emang gw ama Nesia cocok banget kayaknya ngabisini waktu kosong kita.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/blog/finally/&quot;&gt;Finally!&lt;/a&gt; was originally published by Janu Aditya at &lt;a href=&quot;&quot;&gt;Mirkwood Ape&lt;/a&gt; on August 26, 2017.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Swedish Driving License]]></title>
  <link rel="alternate" type="text/html" href="/blog/swedish-driving-license-1/" />
  <id>/blog/swedish-driving-license-1</id>
  <published>2017-02-24T00:00:00+01:00</published>
  <updated>2017-02-24T00:00:00+01:00</updated>
  <author>
    <name>Janu Aditya</name>
    <uri></uri>
    <email>yanuart.adityan@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;22 Agustus 2017&lt;/p&gt;

&lt;p&gt;Total 6 bulan yang dibutuhkan dari pertama kali daftar SIM sampai resmi boleh nyetir di Swedia. Lamaaa banget dibandingkan di Indonesia yang notabene bisa didapet dalam waktu harian dengan asumsi sudah punya pengalaman nyetir dulu. Prosesnya panjang banget dan sumpah serapah melulu ketika sadar cari SIM di Swedia itu investasi minimal 10000 SEK atau sekitar 16 juta rupiah. Ini minimal lho… Jadi begini ceritanya.&lt;/p&gt;

&lt;p&gt;Dalam hati kecil gw yang paling dalam, nyetir mobil adalah sesuatu yang sangat menyenangkan. Bapak always ngajarin nyetir itu adalah lebih dari sekedar bawa kendaraan beserta isinya dari A ke B, tapi jauh lebih dari itu. Nyetir itu seni dalam berdisiplin, berhaluan (orientation), dan bersabar. Ini apalagi ditambah &lt;em&gt;environment&lt;/em&gt; yang sangat menantang di Indonesia. Bagi temen-temen yang sedang tinggal dalam waktu yang lumayan panjang di luar negeri, baik itu lanjut sekolah, kerja ataupun dalam rangka urusan yang lain pasti kadang-kadang berpikiran untuk merasakan rasanya nyetir kendaraan roda empat. Lagian sepertinya (dan gw bisa jamin kok) kalau jalan-jalan sambil bawa mobil sendiri itu tiada duanya &lt;em&gt;feelingnya&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Di Swedia, arus kendaraan yang jauh lebih sedikit ditambah infrastruktur jalan yang sangat bagus membuat kita kadang untuk memandang sebelah mata. Tapi dibalik semua yang serba ada ini, terdapat penegakan hukum yang sangat tinggi dan ketat di jalanan umum, pertama karena Swedia adalah negara yang sangat menjunjung tinggi namanya statistik di dalam lalu lintas. Mereka pengen angka kecelakaan, terutama yang mengakibatkan korban dan luka serius (fatal) terus turun dan di tahun 2020, angka ini mendekati 0. Impossible! Tapi menarik banget buat diikuti, tapi yang lebih menarik lagi, kalo kita sadari bahwa target ga mungkin direalisasikan kalau memang tidak mungkin kalo dipikir-pikir mah. Pasti semua hirarki yang membentuk lalu lintas, dimulai dari infrastruktur, peraturan dan juga semua elemen manusia (pengendara dan pengguna jalan) telah disiapkan untuk kondisi seperti itu. Karena itulah, SIM di Swedia adalah salah satu SIM yang paling berharga di seluruh dunia, dan bahkan bisa digunakan untuk ID card juga lho. Lha emang bawa mobil itu gampang, tapi ngerti tanggung jawab apa aja yang harus diemban itu yang susah, dan juga ngerti  resiko-resiko ketika hal yang tidak diinginkan terjadi di jalanan. Jadi apa aja langkah-langkah untuk dapet SIM di Swedia?&lt;/p&gt;

&lt;h4 id=&quot;learners-permit-krkortstillstnd&quot;&gt;Learner’s Permit (Körkortstillstånd)&lt;/h4&gt;

&lt;p&gt;Hal pertama yang harus dilakukan ad&lt;f2&gt;alah daftar buat namanya *learner&#39;s permit*. Disini kamu harus menyediakan sertifikat kesehatan mata *synintyg* dari dokter mata, optik atau *driving school* terdekat. Sertifikat ini akan dikirim langsung ke Transportstyrelsen untuk didaftarkan ke *personnummer* kamu. Kemudian bayar 220 SEK untuk permitnya agar dikirim ke rumah kamu! Waktu tunggu permit ini bisa sampai 2 bulan lho. Gw cuman nunggu sekitar 2 minggu saja untungnya.&lt;/f2&gt;&lt;/p&gt;

&lt;h4 id=&quot;driving-courses-vningskra&quot;&gt;Driving Courses (Övningsköra)&lt;/h4&gt;

&lt;p&gt;Setelah dapet permitnya, berarti kamu siap belajar nyetir! Ada dua opsi untuk nyetir di Swedia. Lewat jalur resmi melalui sekolah nyetir (driving school) yang terdaftar atau berlatih bersama orang terdekat &lt;em&gt;handledare&lt;/em&gt;. Handledare ini jelas memotong biaya belajar sangat banyak, tapi ada resiko kebiasaan jelek handledare menular ke kalian. Jadinya disarankan banget untuk mengkombinasikan antara belajar di sekolah yang terkadang sangat ketat dan dimantabkan dengan belajar bareng temen, kolega atau keluarga.&lt;/p&gt;

&lt;p&gt;Waktu itu, saya karena sudah berpengalaman nyetir selama 12 tahun, jadi hanya mencoba ambil 10 kali kursus di salah satu sekolah dekat rumah. Habisnya 6000 SEK total, belum dengan dua buku pegangan seharga 150 SEK dan 600 SEK.&lt;/p&gt;

&lt;h4 id=&quot;riskettan&quot;&gt;Riskettan&lt;/h4&gt;

&lt;h4 id=&quot;risktvan&quot;&gt;Risktvåan&lt;/h4&gt;

&lt;h4 id=&quot;theory-test&quot;&gt;Theory Test&lt;/h4&gt;

&lt;h4 id=&quot;practice-test&quot;&gt;Practice Test&lt;/h4&gt;

    &lt;p&gt;&lt;a href=&quot;/blog/swedish-driving-license-1/&quot;&gt;Swedish Driving License&lt;/a&gt; was originally published by Janu Aditya at &lt;a href=&quot;&quot;&gt;Mirkwood Ape&lt;/a&gt; on February 24, 2017.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Birthday Boy]]></title>
  <link rel="alternate" type="text/html" href="/blog/29-yo/" />
  <id>/blog/29-yo</id>
  <published>2017-01-29T00:00:00+01:00</published>
  <updated>2017-01-29T00:00:00+01:00</updated>
  <author>
    <name>Janu Aditya</name>
    <uri></uri>
    <email>yanuart.adityan@gmail.com</email>
  </author>
  <content type="html">
    &lt;iframe width=&quot;420&quot; height=&quot;315&quot; src=&quot;https://scontent-arn2-1.cdninstagram.com/t50.2886-16/16379164_252270721871498_7088761393683365888_n.mp4&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h3 id=&quot;i-am-29-years-old&quot;&gt;I am 29 years old&lt;/h3&gt;

&lt;p&gt;As a person who was born in January, perhaps new year solution is still in the air. But I didn’t really think that way. Not even once, because I’m bad at planning. I do care less on planning and perhaps will still be like this forever. Some people say seems to care about that though. Keep makes me uncomfy. After the thesis, I deliberately read less and less and somewhat, it made me dull and scrolling and scrolling through social media’s timelines won’t help no more.&lt;/p&gt;

&lt;h3 id=&quot;whats-next&quot;&gt;What’s next?&lt;/h3&gt;
&lt;p&gt;Finishing my master thesis was considered to be the light at the end of the tunnel. I did it, and I am happy to have my name now a lil bit longer. But it’s not over yet, new chapter has arrived and much harder. Much much harder. I am pursuing my dream right now, got closer and closer. 40 hours per week I had to put and provide. What do I get though? Even more question marks and slap to my face trying to say that I am not even close to what person I was expecting to be. A person who can contribute 120% to the job, keep delivering perfect marks from &lt;em&gt;chefen&lt;/em&gt; or the manager. But instead, I’d rather consider myself a totally blank paper with litres of black tint lying next to it. Ready to be written with more and more new things. I feel content.&lt;/p&gt;

&lt;h3 id=&quot;enduring&quot;&gt;Enduring&lt;/h3&gt;
&lt;p&gt;I would prefer to call it, fresh start and adaptation. A cycle anyone will eventually has to go through everytime a new chapter comes. And indeed, it is hard even for me who have stayed in Sweden for 2.5 years already. Working environment is totally different from everything I’ve been involved within university. The pace, the degree of error, the perfection and the way we interact with each others are just totally on whole new different page. Kind of a letdown at first, but really to me they were merely a challenge. I didn’t give up and I just need to embrace the uncomfortable and endure.&lt;/p&gt;

&lt;h2 id=&quot;whats-in-february&quot;&gt;What’s in February?&lt;/h2&gt;
&lt;p&gt;3 months of adaptation chapter has started to become less uncomfortable and more convenient. I know some people, mostly new colleagues and I’ve found some similar situations we are facing together. Bounded by lack of experiences has created a fun and positive atmosphere on a collective kind of study. Kind of entering new class with full of new students feeling. It is awesome and what is left now is just two main parts, a driving license and a proper apartment.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/blog/29-yo/&quot;&gt;Birthday Boy&lt;/a&gt; was originally published by Janu Aditya at &lt;a href=&quot;&quot;&gt;Mirkwood Ape&lt;/a&gt; on January 29, 2017.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Chapter: Sweden]]></title>
  <link rel="alternate" type="text/html" href="/blog/the-battle-begins/" />
  <id>/blog/the-battle-begins</id>
  <published>2016-11-12T00:00:00+01:00</published>
  <updated>2016-11-12T00:00:00+01:00</updated>
  <author>
    <name>Janu Aditya</name>
    <uri></uri>
    <email>yanuart.adityan@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;&lt;strong&gt;Waiting is Hard&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;No one can deny that waiting is maybe the less favorable activity amongst plenty. Waiting in a line in public facilities, waiting your friends, your food order, your favorite’s serial next episode, next release of Apple product and much more. But, there’s one that I would deem to be equally hard or even harder. Waiting for someone else’s decision that affects your life. It’s like someone is holding the key to the gate which hinder you to go through. Stick with me.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;June 2016&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I was finishing my thesis and legally I could stay in Sweden ‘til end of June. Everyone else seems to had have their thesis presented during the first 2 weeks and gladly applying for mere 6 months extra stay. What would this period means for us? Prolonging a hope to potentially get a job or further education, e.g. PhD. My girlfriend succesfully got her extension and for me, I applied for different stay, extra 3 months of a sudden death tic-toc time. Not a hope, but rather a final warning to get the thesis done before the end of August.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;July 2016&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Life is like a roller coaster, sometimes up and sometimes down. July was quite a joy for me with sun showering rays and people seems so positive during this time. I got a call from the boss and he suggested me to challenge myself. What kind of challenge other than facing him in an one-on-one technical interview. What for? For a potential full time employment he said. Only if I was interested. I said no, I mean yes, no but yes, oh my, YES, YES sir please. I went through an interview and last day before the everlong summer holiday, he called me and interested to put me in his team.&lt;/p&gt;

&lt;p&gt;No news from him until end of August. Waiting…&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;August 2016&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is one of the worst month of all. My girlfriend got an intern somewhere in Berkeley, CA, and preparing to leave Sweden for good. I couldn’t really support her with lot of free time. After all, 3 supervisors were just having fun sending me revisions by revisions. What kind of holiday they had? So, not enough time for my girl and I was pushed to the limit.&lt;/p&gt;

&lt;p&gt;One revision sent, and waiting period began. Got another two’s.&lt;/p&gt;

&lt;p&gt;One further revision sent. Got another three’s. Waiting is my middle name…&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;September 2016&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Finished everything finally. Got a good solid feedbacks from all of the guys behind. While at the time, got a call from Indonesia. My mom is having a problem with her lungs and my plan to invite her all the way to Gothenburg was cancelled. I need to go home, I need to visit her.&lt;/p&gt;

&lt;p&gt;One can leave Sweden and can’t go back without any VISA. Waiting for ‘already 3.5 months’ VISA extension process…&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;October 2016&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;And here it comes, the October. It was a month of an illegal stay in Sweden here I tell you. I could leave Sweden to go home, but I couldn’t enter Sweden. But Allah is the Great. Allah is the One Who Knows Everything. His plan on me during October subdued me with tranquility. Done with the study and got my final academic transcript (FINALLY!). My mom was getting new chemo pills and her body seemed to accept it pretty well. But still, I would like to meet her and spend times and telling her all my stories during the last 1.5 years. Yet still, I couldn’t go anywhere else and I was just being me. I played Dota 2 prolifically to set the highest record of playing time during the last 2 years. I admit it as a lame achievement, but I like it. Hell yeah. Then, the boss gave me a call and asked me to apply for the official job ads after 3 months.&lt;/p&gt;

&lt;p&gt;Interview phase. Waiting. Written test. Waiting. Another interview. Waiting. Another technical interview. Waiting…&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;November 2016&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Best of the best. I got both the fruits: 6 months extra stay and a piece of paper from the last test of the employment, a drug-test result form…
The longer you wait, the bigger amount of uncertainty is introduced. In the end, a huge amount of surprise will follow a turnaround ending. In this story, a sweet ending it is. But I just couldn’t smile since I know the battle has just started, both for me, my mom and everyone else.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/blog/the-battle-begins/&quot;&gt;Chapter: Sweden&lt;/a&gt; was originally published by Janu Aditya at &lt;a href=&quot;&quot;&gt;Mirkwood Ape&lt;/a&gt; on November 12, 2016.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[360˚ of Myself]]></title>
  <link rel="alternate" type="text/html" href="/blog/recap-of-my-life/" />
  <id>/blog/recap-of-my-life</id>
  <published>2016-09-18T00:00:00+02:00</published>
  <updated>2016-09-18T00:00:00+02:00</updated>
  <author>
    <name>Janu Aditya</name>
    <uri></uri>
    <email>yanuart.adityan@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;I’m writing this post in a cloudy Sunday morning, September 18th, in my favorite breakfast table inside my apartment. Mood is normal and everything seems to be awesome today.&lt;/p&gt;

&lt;p&gt;It has been 2 years since I’ve started my life as (again) student here in lovely Göteborg. I did study much, play harder than ever before, explore so called nature even more than prior chapters of my life. But, I didn’t write that much though, I just don’t have the feeling to write anything. I had this kind of intention to regularly writing the day passed in this blog, but well yeah, not even close. Too much time invested on something else than writing which I like to achieve more. Achieve? Something silly when I haven’t achieved something lately, until this last month…&lt;/p&gt;

&lt;p&gt;Let’s go flashback 8 months ago. I was granted an opportunity to work with Volvo Cars for my academic thesis. It is funded, lots of experiences await and (obviously) an exposure to the one of the Swedish pride, a Volvo.
While it seems fine and fit within some kind of long term plan of mine, I felt like I didn’t possess sufficient knowledge to be involved within the project, but alas, I finished the thesis and presented on fourth week of August. Then I was offered a permanent position within the company, working together with awesome people, in an awesome company full of OCD people about &lt;em&gt;Active Safety&lt;/em&gt;, of course in a positive way. Now, I am writing this post right after I read something from the news, about Mr. Sebastian Thrun. If you don’t know him, he is the founding father of Udacity and ex-director of Google Self Driving Car which just made a statement that &lt;a href=&quot;http://www.recode.net/2016/9/17/12943214/sebastian-thrun-self-driving-talent-pool&quot;&gt;self driving car engineers worth $10M&lt;/a&gt; and industries are running out of this kind of engineers. They need plenty of people to work with and I was like HOLY F**K! Now, I’m in between being confused, happy, anxiety and also vigilant as crazy as you can imagine. Why? Because I didn’t foresee this and now there’s someone open a statement about a big opportunity waits ahead.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt; I never really capable of answering questions about what do I always want with this life. Now, I do know the answer. I want to be an engineer worth $10M. It gives hope to me and hopefully more people to come. I am in this state not because I foresaw this chance, I just followed the path in front of me and taking the turn just because I like to do with it. Opportunity does exist in any path to your dreams. But, it’s not gonna be your dream if you don’t like things you’ll encounter along the path.&lt;/p&gt;


    &lt;p&gt;&lt;a href=&quot;/blog/recap-of-my-life/&quot;&gt;360˚ of Myself&lt;/a&gt; was originally published by Janu Aditya at &lt;a href=&quot;&quot;&gt;Mirkwood Ape&lt;/a&gt; on September 18, 2016.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Interview QA]]></title>
  <link rel="alternate" type="text/html" href="/tips/interview-session/" />
  <id>/tips/interview-session</id>
  <published>2016-05-02T00:00:00+02:00</published>
  <updated>2016-05-02T00:00:00+02:00</updated>
  <author>
    <name>Janu Aditya</name>
    <uri></uri>
    <email>yanuart.adityan@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;This post is all about answers to some most popular interview questions on the market in my perspective.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;[update]&lt;/strong&gt; From my most recent interview with an automotive consultant last week, all of questions except number 4 were asked. So, it is a great deal to roll up your sleeves right before an interview.&lt;/p&gt;

&lt;h4 id=&quot;tell-me-more-about-yourself&quot;&gt;1. Tell me more about yourself&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;(simple but most of the time, interviewer doesn’t want you to tell them about your life stories. Tell them more about your latest education, achievement and recent relevant project or experience to the job you’re applying to)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(start from recent education)&lt;/em&gt;
My name is Jan and I am a master student in Computer Systems and Networks at Chalmers in which I’ve decided to take track specialization in Real-Time Systems. (calling my previous background) I have a degree in electrical engineering back then in 2011 and have been working for almost three years in three different companies. &lt;em&gt;(add some notable responsibility and gained experiences)&lt;/em&gt; Mostly, I’ve been working with various projects, from system-level programming, such as high performance computing and multicore DSP programming to Java-based applet for a smart card project.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(then, end the question with a latest or necessary experience which bring you closer to the company you’re being interviewed with)&lt;/em&gt; For the past 2 terms, I’ve been working with projects on autonomous driving and right now, &lt;em&gt;(referring to people you’re working with)&lt;/em&gt; me and my thesis partner are doing our thesis project with people from Active Safety Analysis and Verification Team at Volvo Cars. This project basically is trying to implement an alternative to the current approach to estimate the vehicle metric position inside indoor environment, which GPS is considered not reliable enough.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(closing statement)&lt;/em&gt;
I think this project is the first experience for me to work with automotive industry and (to be honest that you think it’s new for you and challenging) while I don’t have that much of relevant experience to this, but I think it’s really challenging for me to learn and to be more involved.&lt;/p&gt;

&lt;h4 id=&quot;what-is-your-greatest-weakness&quot;&gt;2. What is your greatest weakness?&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;(whatever the answer is, prepare a backup for couple of example cases)&lt;/em&gt;
I like to do lot of things at the same time but this context switching requires a lot of multitasking capability and demands extra attention and care on managing each task priorities. While it is good for most people, by getting new experiences, (the weakness starts from here) but consider myself to be more productive if I’m in focus.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(an example would be good)&lt;/em&gt;
I’ve spent 5 years on bachelor because I’ve involved on lot of activities outside academic works, and it took tolls on me. I couldn’t catch up with my colleagues and in the end, had to take another year to finish it. However, I’ve learned a lot from that and I believe that I’m better at managing task and jobs priorities.&lt;/p&gt;

&lt;h4 id=&quot;what-is-your-greatest-strength&quot;&gt;3. What is your greatest strength?&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;(same with the previous question, try to express the details of the list you’ve brought in cover letter)&lt;/em&gt;
I am flexible and fast to adapt. Technically, I’ve been working in various kind of project, ranging from low to high level programming. Most of the time, I didn’t have prior knowledge on the projects, but I have no problem working with those projects and some of the projects were quite terrific.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(give example on the details)&lt;/em&gt;
So, I was working on this company … back then in … when I was responsible for …(continue). It was quite challenging for the team to deliver the solution that has to conform with some specifications with a very limited time. Finally, we had found the solution by using GPGPU and while it was quite new thing for us, I volunteered to handle this, learning everything from any reliable sources and it turned out to be a very positive result … (explain more on how good the achievement). It gave me and also the team a new priceless experience and good positive asset for the future, especially on how we will optimize entirely new project, in terms of performance.&lt;/p&gt;

&lt;h4 id=&quot;where-do-you-see-yourself-being-in-3-5-years-from-now&quot;&gt;4. Where do you see yourself being in 3-5 years from now?&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;(this is a question to see your vision within the company. it can be related on how you will contribute more for the sake of company. avoid providing answer that is too ‘full-of-yourself’)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If I could imagine, I see a projection of myself to be a better engineer, especially on the … &lt;em&gt;(specific topics you would like to focus on the job, prior knowledge of the job description would be nice to have)&lt;/em&gt;. I hope I will be able to contribute more to the team, already in a position where I can share my 3-5 experiences to my colleagues, already in a position where I can deliver better documentation and handle the pressures. The team should already take some benefits from all experiences so far.&lt;/p&gt;

&lt;h4 id=&quot;do-you-have-any-questions-for-us&quot;&gt;5. Do you have any questions for us?&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;(this is a question that is always being asked. it could be a big chance for you to show them, how good your knowledge on the company. the bigger your knowledge, the better the questions and the better they think about your interests to work together with them. also, you can use this good chance to review some of the interviewer statements about his/her company.)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Sure, from … &lt;em&gt;(say a good reference)&lt;/em&gt;, big companies often hired people from their consultants. And surely, consultant companies, say some of them, do overlap on some expertise. How your company managed to stay competitive on this issue?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(another question is about your anxiety about some non-technical standpoint)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If I may ask another question, from what you have been mentioned, your company focuses on delivering an embedded solution for automotive industry. however, …. &lt;em&gt;(start asking some issues, not exploiting some weakness, but just to show that you’re as aware about this as with the interviewer)&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Good luck and lycka till!&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/tips/interview-session/&quot;&gt;Interview QA&lt;/a&gt; was originally published by Janu Aditya at &lt;a href=&quot;&quot;&gt;Mirkwood Ape&lt;/a&gt; on May 02, 2016.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Change Tree View Font Size in Atom]]></title>
  <link rel="alternate" type="text/html" href="/tips/atom-tree-view-size/" />
  <id>/tips/atom-tree-view-size</id>
  <published>2016-04-20T00:00:00+02:00</published>
  <updated>2016-04-20T00:00:00+02:00</updated>
  <author>
    <name>Janu Aditya</name>
    <uri></uri>
    <email>yanuart.adityan@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;If you’re wondering how to change Atom side bar (tree view) font size then you just need to add this stuff on &lt;code&gt;styles.less&lt;/code&gt; file in &lt;code&gt;~/.atom/&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;@font-size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;10px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.tree-view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.tab-bar&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.tab&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;4&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Check it out with font-size 10 (side bar) and editor font-size 9.&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/images/post-mac-tips-atom.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Now each window can fit on my 15” rMBP. Perfect!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
Cheers and happy coding.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/tips/atom-tree-view-size/&quot;&gt;Change Tree View Font Size in Atom&lt;/a&gt; was originally published by Janu Aditya at &lt;a href=&quot;&quot;&gt;Mirkwood Ape&lt;/a&gt; on April 20, 2016.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Git Add and Commit in Single Command]]></title>
  <link rel="alternate" type="text/html" href="/tips/git-add-commit/" />
  <id>/tips/git-add-commit</id>
  <published>2016-04-19T00:00:00+02:00</published>
  <updated>2016-04-19T00:00:00+02:00</updated>
  <author>
    <name>Janu Aditya</name>
    <uri></uri>
    <email>yanuart.adityan@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;If you are asking if there is a way to make these commands:&lt;/p&gt;

&lt;pre&gt;
$ git add .
$ git commit -m &#39;commit message&#39;
&lt;/pre&gt;

&lt;p&gt;in a single command, then there is. Git developers are so smart they always think about this. Basically, you predefine the one line command that will perform both command &lt;code&gt;add&lt;/code&gt; and &lt;code&gt;commit&lt;/code&gt; using Git global alias.&lt;/p&gt;

&lt;pre&gt;
$ git config --global alias.addcommit &#39;!git add . &amp;amp;&amp;amp; git commit&#39;
&lt;/pre&gt;

&lt;p&gt;Then use it like this,&lt;/p&gt;

&lt;pre&gt;
$ git addcommit -m &#39;commit message&#39;
&lt;/pre&gt;

&lt;p&gt;Neat huh?&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
Happy coding and cheers!&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/tips/git-add-commit/&quot;&gt;Git Add and Commit in Single Command&lt;/a&gt; was originally published by Janu Aditya at &lt;a href=&quot;&quot;&gt;Mirkwood Ape&lt;/a&gt; on April 19, 2016.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[People Changed, I Did and You Can]]></title>
  <link rel="alternate" type="text/html" href="/blog/working-with-people/" />
  <id>/blog/working-with-people</id>
  <published>2016-04-08T00:00:00+02:00</published>
  <updated>2016-04-08T00:00:00+02:00</updated>
  <author>
    <name>Janu Aditya</name>
    <uri></uri>
    <email>yanuart.adityan@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;Long story short,&lt;/p&gt;

&lt;p&gt;I never really enjoyed working in a team as much as now. In my 5 year of sabbatical bachelor (uh, long time for just a bachelor), working with student colleagues for me was not more than just a nuisance. I wasn’t a good teamworker back then, I prefer to do everything alone because always felt faster. I’m gonna be a &lt;em&gt;greedy algorithm&lt;/em&gt; person all the time, so rushing toward something gimme more chill than, slow but well prepared approach. I was like this even after moved to professional working environment. Continuing some works from previous workers had done was good enough to give me an headache. The way I overcame this wasn’t not even better.&lt;/p&gt;

&lt;p&gt;I always did prepare the clean slate and start from the scratch. I did this for almost every workflow of mine. Because I don’t want people to spill my codes. I codecheck everything, makesure everything okay, then make my own version and start from there. But then, when the inbound pressure keeps coming in, I just realised (oh really), that this way is not even faster. This solitude won’t gimme any slight second faster execution time. So, I just rubbed my face, clinging my emotion to a very small dark corner, open my eyes and telling myself, &lt;em&gt;a pressure is meant to be shared&lt;/em&gt;. Then, start talking to the boss and share this burden. Well, an unexpected decision but slowly, started to get attached to this kind of conversation. Started to like the idea of four-eyes discussion and glad I’m between nice people (nice people do exist).&lt;/p&gt;

&lt;p&gt;Now, people keep saying I’m one of the most indulgent, lenient and patient person they have been working with. I don’t really like the idea but it’s a compliment I guess. See? Even I don’t want people to recognise that I have changed. No one in this world, except for the closest one probably, that will taste my wrath. Haha just kidding, seldom is just the best word to describe how often the temper of mine is rising. Flat, bland and boring describe my emotional probably.&lt;/p&gt;

&lt;p&gt;So enough for the intro, this post basically just my argument on how working with different people, sometime brings either happiness or tears. Why? Because people are unique. Bounded by some similarities, for example in sense of geographical references does not make relation between Indonesian in Sweden as solid as rock. Small friction in a pep talk could rise into a big dispute (wow it’s real). Small strife and ignorance towards other, will do make some keeping a social distance. This distance contributes significantly to their social circles. In a way that we supposed to have very small or even no boundaries, now we have gap as big as Red Sea in between.&lt;/p&gt;

&lt;p&gt;I see old myself on those people, either the bad or good actors. The one that never embrace themselves to be a person who open to others more. Like wise man said, when someone slaps you on the right cheek, touch him gently on his left cheek. I believe on an idea in where you do a good deeds to someone, immeasurable retaliation is something you’ll get somewhere in the future. And for a bonus, you’re gonna be as lenient as a soft butter because now you could maintain your good mood. Not really affected by surroundings. Becoming more ignorant, but in positive way. You build your filter for negative moods and believe me, this will affect your circles. Start by yourself.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr width=&quot;25%&quot; align=&quot;center&quot; /&gt;

&lt;p&gt;to &lt;strong&gt;Angga &amp;amp; Ade&lt;/strong&gt;,&lt;/p&gt;

&lt;p&gt;two persons which I must say, have been in a situation which most people could not handle but now I’m nothing but sort of proud. Congratulations for both of you. Now you guys lead a small family and can’t wait to see her this year.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;to &lt;strong&gt;Nesia&lt;/strong&gt;,&lt;/p&gt;

&lt;p&gt;I did, I am and will always admire you. I guess I am lucky to have you here, thousand miles from home. You’re very special person that first time on my life, I do feel that I always have a time to share with (you). The way you always seek forward and never look back was an inspiration for me. I would say, you’re a &lt;em&gt;dynamic programming&lt;/em&gt; person, are you not? You learned from what you did, and plan everything carefully. The perfectionist at its best, deliver only the best and with unrivaled focus ability. I apologize for defocusing you (often) these days.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/blog/working-with-people/&quot;&gt;People Changed, I Did and You Can&lt;/a&gt; was originally published by Janu Aditya at &lt;a href=&quot;&quot;&gt;Mirkwood Ape&lt;/a&gt; on April 08, 2016.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[The Six Months of Battle]]></title>
  <link rel="alternate" type="text/html" href="/blog/thesis/" />
  <id>/blog/thesis</id>
  <published>2016-02-02T00:00:00+01:00</published>
  <updated>2016-02-02T00:00:00+01:00</updated>
  <author>
    <name>Janu Aditya</name>
    <uri></uri>
    <email>yanuart.adityan@gmail.com</email>
  </author>
  <content type="html">
    &lt;section id=&quot;table-of-contents&quot; class=&quot;toc&quot;&gt;
  &lt;header&gt;
    &lt;h3&gt;tic toc&lt;/h3&gt;
  &lt;/header&gt;
&lt;div id=&quot;drawer&quot;&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#the-backstory&quot; id=&quot;markdown-toc-the-backstory&quot;&gt;The Backstory&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#pandora-box&quot; id=&quot;markdown-toc-pandora-box&quot;&gt;Pandora Box&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#outrun-the-ticking-clock&quot; id=&quot;markdown-toc-outrun-the-ticking-clock&quot;&gt;Outrun the ticking clock&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

  &lt;/div&gt;
&lt;/section&gt;
&lt;!-- /#table-of-contents --&gt;

&lt;h2 id=&quot;the-backstory&quot;&gt;The Backstory&lt;/h2&gt;

&lt;p&gt;Kära alla!&lt;/p&gt;

&lt;p&gt;sudah lumayan lama ga nulis blog. Soalnya entah kenapa rasanya males banget nulis, ketika bisa nulis dan sharing cepet di sosmed. Bahan yang mau ditulis sih sebenarnya banyak banget, spontant nongol tapi gara-gara ga ditulis, spontan juga hilangnya. Walo setelah dipikir-pikir, udah lumayan effort juga dahulu bikin ini blog yang niatnya untuk catat cerita hidup pas S2 jauh-jauh di Swedia, jadi ya sayang kalau ga dibudidayakan hoho. Okeh, jadi ini mau cerita tentang pengalaman cari thesis bareng company gitu yang akhirnya ngebawa saya kerja di perusahaan otomotif (sementara, tp &lt;em&gt;well&lt;/em&gt; siapa tahu nanti). Halfway to one of my dreams, kerja di dunia otomotif.&lt;/p&gt;

&lt;p&gt;Jadi, bulan Desember 2015, berakhirlah semester reguler terakhir. Reguler karena isinya kuliah, lab, dan juga proyek. Dan ini menandakan berakhirnya juga semua ujian-ujian tulis dan presentasi proyek. Sekarang saatnya thesis yang bisa sampai 6 bulan ngerjainnya. Intinya sih setelah dirasa-rasa thesis harus seru soalnya gimana ga, ngapain juga susah-susah belajar kalau ga seneng ngerjainnya gara-gara ga seru? Lagian udah bosen ama kuliah-kuliah. Jadi seru yang dalam artian serius dan fun, karena ya ga mau lagi kebablasan dulu kayak jaman tugas akhir S1 yang entah kenapa malah dapetnya &lt;em&gt;fluid dynamics&lt;/em&gt;. Jadi, akhirnya setelah timbang-timbang beberapa kuliah terakhir yang disuka dan kira-kira, topik apa yang lagi panas di Swedia dan juga sekitarnya, dapetlah area diseputar &lt;em&gt;Autonomous Driving&lt;/em&gt; (AD).&lt;/p&gt;

&lt;p&gt;Volvo Cars yang markas besarnya di Torslanda, 20 menit dari pusat kota Gothenburg lagi getol-getolnya ama program baru mereka yang namanya &lt;em&gt;Drive Me&lt;/em&gt;. Mereka berencana rilis 100 kendaraan AD di tahun 2020 yang akan diterjunkan di Gothenburg dan kota-kota sekitarnya. Tentu, dengan tambahan fitur &lt;em&gt;self-driving&lt;/em&gt; yang harus tested, safety critical, verified dan validated. &lt;em&gt;Drive Me&lt;/em&gt; juga merupakan tempat tujuan berbagai macam engineers di Chalmers buat ngerjain thesis, dari Mechanical Engineering, Electrical Engineering, Complex-Adaptive Systems, Neural Network, Applied Math &amp;amp; Physics, etc. Saya disini salah satunya.&lt;/p&gt;

&lt;p&gt;Desember 18, dua hari sebelum liburan Natal yang panjang di Swedia, saya dan rekan seperjuangan, David Bennehag kita lagi siap-siap presentasi proyek kita tentang &lt;strong&gt;Vehicle State Estimator for 3-DoF Vehicle (Volvo XC60) using Extended Kalman Filter&lt;/strong&gt;. Selesai presentasi, kita diceramahi ama dua supervisor Mauro dan Olla tentang program &lt;em&gt;Drive Me&lt;/em&gt; itu dan &lt;em&gt;You guys should apply for an exjobb there!&lt;/em&gt;. Lalu, yang semulanya kita udah excited buat liburan Natal, jadinya malah sibuk update CV dan cari judul thesis yang ditawarkan di &lt;em&gt;Teknologjobben.se&lt;/em&gt;. Dari sekian banyak judul dari berbagai macam companies, e.g. Volvo Cars, Volvo Trucks, SAAB, ABB, Bombardier, Ericsson dan lainnya, akhirnya kita nemuin satu topik tentang &lt;em&gt;Indoor Global Positioning using Multiple Sensors&lt;/em&gt; dan ditawarkan oleh Volvo Cars. Kita rasa ini yang ada hubungannya ama proyek kita yang baru kelar dan akhirnya daftarlah kita!&lt;/p&gt;

&lt;p&gt;Besoknya, kita dapat email langsung dari Volvo Cars dan langsung minta untuk technical interview keesokan paginya. So, without any hesitation AT ALL we said yes dan sibuk buka-buka materi apapun yang relevan buat interview.&lt;/p&gt;

&lt;p&gt;Di tanggal 20, kita interview pagi jam 8:00 CET. Ga tanggung-tanggung, ada 3 orang dari Volvo yang gonta-ganti tanyain tentang &lt;em&gt;almost everything&lt;/em&gt;. Sepertinya mereka juga udah mode liburan jadi santai, cuman paling ga jadi kebayang kalo kerja ama mereka situasinya bakal kayak gimana. But in the end, it was quite good interview, meski kita uda mencoba sebaik mungkin, ada beberapa pertanyaan yang kita ga bisa jawab. Dan sorenya mereka nelpon lagi ngasih kabar bahwa kita diterima buat ngerjain thesis di Volvo Cars!&lt;/p&gt;

&lt;h2 id=&quot;pandora-box&quot;&gt;Pandora Box&lt;/h2&gt;

&lt;p&gt;Arghhh…Sebulan udah lamanya ga kerasa ngerjain thesis bareng Volvo Cars. Kita udah dapet sketsa problem buat thesis, konteks dan juga approach yang mereka minati untuk kita pake. Next step adalah mencari dosen pembimbing. Well, jurusan gue sedikit aneh emang, MPCSN atau &lt;em&gt;Master Programme in Computer Systems and Networks&lt;/em&gt;, tapi memperbolehkan kita untuk cari thesis apapun selama kita bisa. Thesis ini, dimana permasalahan ada di domain sinyal dan sistem, membuat kita agak kelabakan cari supervisor sih kalau boleh jujur. Walau akhirnya Volvo ngasih kita saran buat kontak salah satu Lead Professor di Computer Vision lab, Professor Fredrik Kahl.&lt;/p&gt;

&lt;p&gt;Awal Februari, kita ketemu dengan Fredrik, barengan bersama Jonathan dari Volvo buat brainstorming tentang berbagai macam penyelesaian masalah yang kita hadapi. Inti dari permasalahan dimulai ketika GPS tidak lagi reliabel untuk dijadikan positioning device di keadaan tertentu, misal didalam &lt;em&gt;tunnel&lt;/em&gt;. Alhasil, trajektori kendaraan ketika berada di dalam tunnel, murni hanya merupakan estimasi dari perubahan state kendaraan, e.g. kecepatan, akselerasi, steering angle, etc. Semestinya &lt;em&gt;bad estimation&lt;/em&gt; harus di drop ketika filter menunjukkan pengukuran (menggunakan GPS) menghasilkan &lt;em&gt;covariance matrix&lt;/em&gt; yang lebih bagus. Jadi filter disini adalah semacam algoritma yang akan menentukan mana yang bisa lebih dipercaya, estimasi atau pengukuran. State estimation paling umum yang digunakan adalah Kalman Filter. Tetapi, ketika GPS tidak lagi reliabel, murni kita hanya bisa menghitung estimasi dari model kendaraan, karena ketika di dalam tunnel, sinyal GPS lebih banyak menghasilkan &lt;em&gt;noise&lt;/em&gt; dengan covariance yang terlalu besar.&lt;/p&gt;

&lt;p&gt;Well, ada beberapa metode yang telah diterapkan untuk mengatasi problem ini. Salah satunya adalah menggunakan GPS point repeater di dalam tunnel, yang diletakkan setiap beberapa checkpoint sepanjang jalan. Metode ini efektif sehingga kendaraan masih bisa menggunakan GPS, tetapi tidak efisien dan menghabiskan banyak biaya, terutama jika tunnel sangat panjang. Metode yang lain adalah menggunakan &lt;em&gt;dead reckoning&lt;/em&gt; dan biasanya digunakan untuk komputasi offline. Jadi menggunakan dua kendaraan yang masuk ke tunnel dari dua arah yang berbeda. Seiiring makin jauhnya kedua kendaraan tersebut masuk ke dalam tunnel, semakin tinggi pula error dari estimasi trajektori kendaraan (drifted). Ketika dua trajektori tersebut bertemu, dengan teknik bernama &lt;em&gt;bundle adjust&lt;/em&gt;, drift bisa dikurangi dan trayektori dari kedua kendaraan akan dideteksi lebih akurat. Kelemahan dari &lt;em&gt;dead reckoning&lt;/em&gt;, selain offline, tetapi juga tidak efisien ketika rute di dalam tunnel berkelok kelok, karena drift akan jauh lebih susah untuk dikoreksi.&lt;/p&gt;

&lt;p&gt;Akhirnya, di akhir meeting, kita sepakat untuk menggunakan monocular perspective camera untuk dijadikan mainan utama kita. Domain permasalahan dipersempit menjadi &lt;em&gt;solving camera pose using multiple image sequences inside tunnel&lt;/em&gt;. Jadi dengan diberikan hasil rekaman video dari kamera yang dipasang di kendaraan, dengan diketahui posisi terakhir kamera relatif ke unit GPS sebelum masuk tunnel, dengan menggunakan teknik bernama Visual Odometry, kita bisa mencari &lt;em&gt;pose&lt;/em&gt; dari kamera dengan membandingkan pergeseran piksel tiap framenya.&lt;/p&gt;

&lt;p&gt;Paling tidak sekarang The Pandora Box is here, time to digest it and defeat it.&lt;/p&gt;

&lt;h2 id=&quot;outrun-the-ticking-clock&quot;&gt;Outrun the ticking clock&lt;/h2&gt;

&lt;p&gt;(April project)&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/blog/thesis/&quot;&gt;The Six Months of Battle&lt;/a&gt; was originally published by Janu Aditya at &lt;a href=&quot;&quot;&gt;Mirkwood Ape&lt;/a&gt; on February 02, 2016.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Make IT Matter]]></title>
  <link rel="alternate" type="text/html" href="/blog/make-it-matter/" />
  <id>/blog/make-it-matter</id>
  <published>2015-10-12T00:00:00+02:00</published>
  <updated>2015-10-12T00:00:00+02:00</updated>
  <author>
    <name>Janu Aditya</name>
    <uri></uri>
    <email>yanuart.adityan@gmail.com</email>
  </author>
  <content type="html">
    &lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;Who hasn’t heard about Spotify? Me…&lt;/p&gt;

&lt;p&gt;Back to 2 years ago, I have to be honest, I didn’t have any idea what &lt;strong&gt;Spotify&lt;/strong&gt; is. What kind of iOS/Android app it can do and I didn’t have a chance to install it since there was no Spotify service in Indonesia.&lt;/p&gt;

&lt;p&gt;Year later, when I completely forgot about Spotify, I decide to pursue master study in Sweden. People (friends, colleagues) are going for Australia (mostly), Singapore or Japan. Some landed in Germany, Netherlands or UK. Some of the smartest are in States. Yet, no one opted for Sweden.&lt;/p&gt;

&lt;p&gt;I searched the internet and I’ve found Spotify again! Going deep into the darkest part of the internet looking for an answer and here I am, in Sweden, getting closer to a company who single-handedly shown a new way how music should be distributed. This is exactly what you should do to avoid nasty piracy, especially in Indonesia, but why it’s not available at that moment?&lt;/p&gt;

&lt;p&gt;I’ve read &lt;a href=&quot;https://www.quora.com/Is-Spotify-good-or-bad-for-artists-and-musicians&quot;&gt;here&lt;/a&gt; that as a new artist, being discovered by Spotify doesn’t necessarily help them to get a money. However, as an artist, being listened for your works deemed as more important, and in my opinion, Spotify takes a big role here.&lt;/p&gt;

&lt;p&gt;Another breakthrough thing from Spotify is, with more than &lt;a href=&quot;http://www.techradar.com/reviews/pc-mac/software/utilities/other-software/spotify-526289/review&quot;&gt;20 million&lt;/a&gt; songs in the library, sure it needs a lot of effort to put which songs on which categories but it seems like Spotify has succesfully done it, generating plenty of different playlist that we can pick and listen. It saves us lot of time, especially for someone who love to listen new songs everyday. Pick suitable mood in the playlist and let Spotify decides what’s the best. I can’t really imagine if I have 20 million of songs in my drive, whenever I’m opening the music player, probably I will just listen to not more than 30 song titles. But now, with Spotify I did listen to much more songs than ever. I’ve discovered more and more good songs.&lt;/p&gt;

&lt;h3 id=&quot;things-ive-done&quot;&gt;Things I’ve Done&lt;/h3&gt;

&lt;p&gt;My name is Yanuar Tri Aditya Nugraha. I was born 27 years ago in small city in Java, Indonesia. I have a bachelor degree in electrical engineering and now I am pursuing Computer Systems and Networks master programme in Chalmers University of Technology where I put more emphasizes about real-time systems, vehicular communications and computer security. I am in second year now and ready for thesis by the end of this year.&lt;/p&gt;

&lt;p&gt;I have quite lot of experiences working on agile development. It was ~2 years working experience with software-defined radio for LTE 4G. It was a project funded by Indonesian government to accelerate the implementation of this technology. In sort, I was working with C-programming languages and MATLAB to derive embedded-system-friendly algorithms, &lt;em&gt;e.g.&lt;/em&gt; cyclic redundancy check, fast fourier-transform, and turbo code.&lt;/p&gt;

&lt;p&gt;Another project was with Microsoft, developing real-time melting effect on liquid simulations. Together as a three, we were given an existing real-time fluid simulation based on &lt;a href=&quot;http://image.diku.dk/projects/media/kelager.06.pdf&quot;&gt;this&lt;/a&gt; and &lt;a href=&quot;http://www.ss.iij4u.or.jp/~amada/fluid/&quot;&gt;that&lt;/a&gt; that use Smoothed Particle Hydrodynamics on Lagrangian fluid model. Then each of us had to pick certain scenario that can be developed and later on represented as a new validated (subjectively) results. I picked a scenario where thermodynamics is introduced to the system. It brings whole level of complexity as in fluid dynamics, as thermodynamics are applied, whole fluids behaviour, &lt;em&gt;e.g&lt;/em&gt;, viscosity, density, friction, surface tension etc, are altered. However, by limiting the changing parameters with just viscosity and density, was considered enough to give a representative results.&lt;/p&gt;

&lt;p&gt;This is one of the result that I’ve posted on my &lt;a href=&quot;https://www.youtube.com/user/konargimblih&quot;&gt;Youtube&lt;/a&gt; channel.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/LfX6F7RpA1A&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Not that much of something you have expected to see, but I am open for new stuffs and new experiences.&lt;/p&gt;

&lt;p&gt;By this August, I was appointed to become one of the student ambassador in the university to help them promoting Chalmers abroad, especially Indonesia. I would like to carry Spotify name, alongside with other Swedish multinational companies, &lt;em&gt;e.g.&lt;/em&gt;, Volvo, Ericsson, Scania, SKF, DICE, etc. However, I don’t feel that I’m good enough since I never really involved directly with Spotify, other than just a member and spending a night on &lt;a href=&quot;https://twitter.com/johanbrook/status/511589867198107648&quot;&gt;Study Night with Spotify&lt;/a&gt; last year. Somehow I want to contribute more than that.&lt;/p&gt;

&lt;h3 id=&quot;make-it-matter&quot;&gt;Make IT Matter&lt;/h3&gt;

&lt;p&gt;I got the information what I need about this &lt;strong&gt;Make IT Matter&lt;/strong&gt; event from Facebook. In a glimpse, with 3D2N format, it’s like a hackathon for me. And talking about hackathon, I’m not exactly sure whether I can contribute or not in a team, as I consider myself not really a software developer who has broad knowledge on software development tools, I do know some of JavaScript library, e.g. &lt;strong&gt;D3.js&lt;/strong&gt; for data-driven visualisation, but my most used experience is in C language though. I don’t know if that will gonna be a big help. Probably that’s not a technical knowledge that will be needed much in a software company like Spotify, but I do love to have an opportunity to meet people all around the world in this event.&lt;/p&gt;

&lt;p&gt;Getting to know with what’s gonna happen in the near future, especially if the news comes within one of the most successful software company who &lt;a href=&quot;http://mashable.com/2013/10/06/spotify-music-economy/#tRqM_1G.SSqa&quot;&gt;engineered the new music industry&lt;/a&gt; will definitely something to look up to. I would love to be inside the event with Spotify.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Thanks a lot and warm regards,&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Yanu&lt;/em&gt;&lt;/p&gt;


    &lt;p&gt;&lt;a href=&quot;/blog/make-it-matter/&quot;&gt;Make IT Matter&lt;/a&gt; was originally published by Janu Aditya at &lt;a href=&quot;&quot;&gt;Mirkwood Ape&lt;/a&gt; on October 12, 2015.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Real-Time 3D Globe Site Visitor Monitoring]]></title>
  <link rel="alternate" type="text/html" href="/tips/globe-real-time-monitoring/" />
  <id>/tips/globe-real-time-monitoring</id>
  <published>2015-10-10T00:00:00+02:00</published>
  <updated>2015-10-10T00:00:00+02:00</updated>
  <author>
    <name>Janu Aditya</name>
    <uri></uri>
    <email>yanuart.adityan@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;Yeah, I just roamed through some JavaScript tutorials when I’ve found out about this thing called &lt;a href=&quot;https://www.revolvermaps.com&quot;&gt;RevolverMap&lt;/a&gt;. It collects the visitor of your site and showing it with cool &lt;strong&gt;GL&lt;/strong&gt; based 2D/3D globe as a widget on your site. It is free of charge, very easy to install and customisable in size and appearance.&lt;/p&gt;

&lt;p&gt;Here I’ll try to provide you with some of the widges in action.&lt;/p&gt;

&lt;h3 id=&quot;regular-globe&quot;&gt;Regular Globe&lt;/h3&gt;

&lt;script type=&quot;text/javascript&quot; src=&quot;//ra.revolvermaps.com/0/0/6.js?i=0314opn7pot&amp;amp;m=7&amp;amp;s=341&amp;amp;c=ff0000&amp;amp;cr1=ffffff&amp;amp;f=ubuntu&amp;amp;l=0&amp;amp;bv=100&amp;amp;lx=-700&amp;amp;ly=-320&amp;amp;hi=40&amp;amp;rs=100&amp;amp;as=10&quot; async=&quot;async&quot;&gt;&lt;/script&gt;

&lt;p&gt;The regular globe is the latest one and the most updated I presume. You can attach the widget as new stuff or as an update to your previous attached widget. This is my favourite for now.&lt;/p&gt;

&lt;h3 id=&quot;mini-globe&quot;&gt;Mini Globe&lt;/h3&gt;

&lt;p&gt;They also offer the regular globe but on smaller size. Probably it is a good widget for your multiple column sites. I’m thinking to put this mini globe right at the footer (think think think…).&lt;/p&gt;

&lt;script type=&quot;text/javascript&quot; src=&quot;//ra.revolvermaps.com/0/0/5.js?i=0g90dd9kyof&amp;amp;m=1c&amp;amp;s=180&amp;amp;c=ff0000&amp;amp;cr1=ffffff&amp;amp;cw=ffffff&amp;amp;cb=000000&quot; async=&quot;async&quot;&gt;&lt;/script&gt;

&lt;h3 id=&quot;d-map&quot;&gt;2D Map&lt;/h3&gt;

&lt;p&gt;If you don’t like a round globe, then probably a flat world map suits you better. It does come with several options for the map, &lt;em&gt;e.g.&lt;/em&gt;, different seasons setup, transparent, and regular. Check the website for complete features.&lt;/p&gt;

&lt;script type=&quot;text/javascript&quot; src=&quot;//ra.revolvermaps.com/0/0/7.js?i=0tgvdwyy5bw&amp;amp;m=6&amp;amp;c=ff0000&amp;amp;cr1=ffffff&amp;amp;sx=0&quot; async=&quot;async&quot;&gt;&lt;/script&gt;

&lt;p&gt;Pretty cool huh? Try to customise everything by yourself, from color, transparency, background, size and how you can embed the widget on your website.&lt;/p&gt;

&lt;p&gt;Cheers!&lt;/p&gt;


    &lt;p&gt;&lt;a href=&quot;/tips/globe-real-time-monitoring/&quot;&gt;Real-Time 3D Globe Site Visitor Monitoring&lt;/a&gt; was originally published by Janu Aditya at &lt;a href=&quot;&quot;&gt;Mirkwood Ape&lt;/a&gt; on October 10, 2015.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Hide Working Directory in Terminal]]></title>
  <link rel="alternate" type="text/html" href="/tips/hide-directory-terminal/" />
  <id>/tips/hide-directory-terminal</id>
  <published>2015-10-08T00:00:00+02:00</published>
  <updated>2015-10-08T00:00:00+02:00</updated>
  <author>
    <name>Janu Aditya</name>
    <uri></uri>
    <email>yanuart.adityan@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;Do you wonder how to hide your current working directory in terminal? If you’re in &lt;code&gt;~/Workspace/firstDir/secondDir/thirdDir&lt;/code&gt;, then it would show terminal as something like this:&lt;/p&gt;

&lt;pre&gt;
januaditya@janu-rmbp:~/Workspace/firstDir/secondDir/thirdDir$
&lt;/pre&gt;

&lt;p&gt;If you want the shell to show just the last directory, which in this case is &lt;code&gt;thirdDir&lt;/code&gt;, you can add this to &lt;code&gt;~/.bash_profile&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;
export PS1=&quot;\W \$&quot;
&lt;/pre&gt;

&lt;p&gt;Then, source the bash using:&lt;/p&gt;

&lt;pre&gt;
$ source ~/.bash_profile
&lt;/pre&gt;

&lt;p&gt;Now, your terminal would look like this:&lt;/p&gt;

&lt;pre&gt;
thirdDir $
&lt;/pre&gt;

&lt;p&gt;Look what you can do &lt;a href=&quot;http://www.ibm.com/developerworks/linux/library/l-tip-prompt/&quot;&gt;more&lt;/a&gt; on command prompt (UNIX/Linux).&lt;/p&gt;


    &lt;p&gt;&lt;a href=&quot;/tips/hide-directory-terminal/&quot;&gt;Hide Working Directory in Terminal&lt;/a&gt; was originally published by Janu Aditya at &lt;a href=&quot;&quot;&gt;Mirkwood Ape&lt;/a&gt; on October 08, 2015.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[C #8 | I/O in C]]></title>
  <link rel="alternate" type="text/html" href="/waga/c-tutor-8/" />
  <id>/waga/c-tutor-8</id>
  <published>2015-10-08T00:00:00+02:00</published>
  <updated>2015-10-08T00:00:00+02:00</updated>
  <author>
    <name>Janu Aditya</name>
    <uri></uri>
    <email>yanuart.adityan@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;For the complete list of the tutorial on this blog, you can check these following links:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://yanuartadityan.github.io/tutorial/c-tutor-1&quot;&gt;1. Introduction&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;http://yanuartadityan.github.io/waga/c-tutor-2&quot;&gt;2. First C-Program&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;http://yanuartadityan.github.io/waga/c-tutor-3&quot;&gt;3. Types and Variables&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;http://yanuartadityan.github.io/waga/c-tutor-4&quot;&gt;4. Conditional Statements&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;http://yanuartadityan.github.io/waga/c-tutor-5&quot;&gt;5. Function and Math Operations&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;http://yanuartadityan.github.io/waga/c-tutor-6&quot;&gt;6. Arrays&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;http://yanuartadityan.github.io/waga/c-tutor-7&quot;&gt;7. Pointers&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;http://yanuartadityan.github.io/waga/c-tutor-8&quot;&gt;&lt;strong&gt;8. I/O in C&lt;/strong&gt;&lt;/a&gt; &lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Allright, so far we’ve just used all static values. Every values are staticly predefined and a program would be useless without some way to talk to the users of the program. If you consider yourself a user, and your colleague as a program, then you’ll supply him with informations about stuffs. And your colleague has to be able to catch those supplies and do something as predetermined before else.&lt;/p&gt;

&lt;p&gt;This way of communication is called &lt;strong&gt;input output&lt;/strong&gt; (I/O). One way to communicate that we’ve learned and implemented is &lt;code&gt;printf()&lt;/code&gt;, which tells the program to deliver some informations to users.&lt;/p&gt;

&lt;p&gt;Let’s start by knowing what &lt;code&gt;printf&lt;/code&gt; can do.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Hello World&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That is pretty much regular usage of printf, printing &lt;strong&gt;Hello World&lt;/strong&gt; string into the display. If you have a variable, then you can let printf to put it with help of format specifier &lt;code&gt;%&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;a is %d, b is %d, the sum would be %d&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And the output will exactly the same as this more efficient, less variable usage printf:&lt;/p&gt;

&lt;pre&gt;
printf(&quot;a is %d, b is %d, the sum would be %d&quot;, a, b, a+b);
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Casting&lt;/strong&gt; also can be used, to let compiler treat some values to a different type, for example you want to print integer values from float (albeit the value will be rounded) like this:&lt;/p&gt;

&lt;pre&gt;
float phi = 3.14;

printf(&quot;the value of phi is %d&quot;, (int)phi);
&lt;/pre&gt;

&lt;p&gt;Always make sure that you watch your variables value, as rounded values could lead into different meaning from several constant, &lt;em&gt;e.g&lt;/em&gt;, &lt;strong&gt;phi&lt;/strong&gt; value. Always use float or double to represent these kind of constants.&lt;/p&gt;

&lt;p&gt;Now, if printf display some informations to the user, C is capable to record users input using several methods, &lt;em&gt;e.g.&lt;/em&gt; reading files, command-line argument and using run time function, &lt;code&gt;scanf()&lt;/code&gt;. However, we’ll gonna use only scanf for now to design some kind of computer-to-user interview program. Here, the program will ask user and user will have to prepare answers. Each of the answer is recorded using scanf and saved to a variable.&lt;/p&gt;

&lt;p&gt;Basically, scanf requires you to include &lt;code&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/code&gt;, similar with printf.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/* create a variable named userInput */&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/* ask user about something */&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;What is your age?&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When you compile above code and let it runs, the output will be a question &lt;strong&gt;What is your age?&lt;/strong&gt; to any users who are using the program. When they want to answer with age numbers, program catch the entered value with scanf. Expected input should be stored in a memory address of correlated variable (with suitable data type), which in this case an integer.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/* create a variable named userInput */&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/* ask user about something */&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;What is your age?&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/* retrieve the user input */&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;scanf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;%d&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The scanf function ignores blanks and tabs in its format string, and will skip over white space as it looks for the proper input values. Whenever the question appears on the screen, then the program will prompt user to provide an answer. Any valid numbers will then stored on the &lt;code&gt;userInput&lt;/code&gt; variable.&lt;/p&gt;

&lt;p&gt;Now, let’s make a simple program that will ask user’s informations, &lt;em&gt;e.g.&lt;/em&gt; age, lastname and firstname. Then, at the end, we give the user the table-like summary (of course using command line).
First of all, we will learn how to retrieve user’s name as string arrays. It’s little bit different than how we record integer. Take a look at the complete program first:&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/0097f3678b1c6b986b4e.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;First, declare two arrays variables, first is &lt;code&gt;char userLastName[256]&lt;/code&gt; and the second is &lt;code&gt;char userFirstName[256]&lt;/code&gt;. The number here means the length of the reserved memory for each variable is 256 &lt;code&gt;char&lt;/code&gt; or equals to 256 bytes due to 1 char equals to 1 byte of memory space (1 char is 8 bits, 8 bits is 1 byte).&lt;/p&gt;

&lt;p&gt;Then, after asking the user about his/her age, next question is for the name. We will use &lt;code&gt;%s&lt;/code&gt; to capture strings or characters. We will store the user’s name into declared variable arrays. As now we want to treat those input as sequence of some characters, we want to reserve memory space through the variable array. Now, we will point scanf to write the captured input to the address of the first index of the array. Thus we have to pass &lt;code&gt;&amp;amp;arrayName[0]&lt;/code&gt; instead of just &lt;code&gt;&amp;amp;arrayName&lt;/code&gt; as you can see on &lt;strong&gt;line:19&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Now, we have user’s age, last name and first name. &lt;strong&gt;line:26&lt;/strong&gt; to &lt;strong&gt;29&lt;/strong&gt; are used to format the summary. Keep in mind that you can represent the summary as you wish with your own preferences.&lt;/p&gt;

&lt;p&gt;Here’s the output from my terminal:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;o&quot;&gt;=====&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;USER&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;INFORMATION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=====&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Full&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Name&lt;/span&gt;	 &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Janu&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Aditya&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Age&lt;/span&gt; 		 &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;27&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;==========================&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Next, we will try to exploit another way to pass user’s inputs into our program by &lt;a href=&quot;http://yanuartadityan.github.io/waga/c-tutor-8&quot;&gt;reading files and passing arguments&lt;/a&gt;.&lt;/p&gt;


    &lt;p&gt;&lt;a href=&quot;/waga/c-tutor-8/&quot;&gt;C #8 | I/O in C&lt;/a&gt; was originally published by Janu Aditya at &lt;a href=&quot;&quot;&gt;Mirkwood Ape&lt;/a&gt; on October 08, 2015.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[C #7 | Pointers]]></title>
  <link rel="alternate" type="text/html" href="/waga/c-tutor-7/" />
  <id>/waga/c-tutor-7</id>
  <published>2015-10-07T00:00:00+02:00</published>
  <updated>2015-10-07T00:00:00+02:00</updated>
  <author>
    <name>Janu Aditya</name>
    <uri></uri>
    <email>yanuart.adityan@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;For the complete list of the tutorial on this blog, you can check these following links:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://yanuartadityan.github.io/tutorial/c-tutor-1&quot;&gt;1. Introduction&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;http://yanuartadityan.github.io/waga/c-tutor-2&quot;&gt;2. First C-Program&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;http://yanuartadityan.github.io/waga/c-tutor-3&quot;&gt;3. Types and Variables&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;http://yanuartadityan.github.io/waga/c-tutor-4&quot;&gt;4. Conditional Statements&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;http://yanuartadityan.github.io/waga/c-tutor-5&quot;&gt;5. Function and Math Operations&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;http://yanuartadityan.github.io/waga/c-tutor-6&quot;&gt;6. Arrays&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;http://yanuartadityan.github.io/waga/c-tutor-7&quot;&gt;&lt;strong&gt;7. Pointers&lt;/strong&gt;&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;http://yanuartadityan.github.io/waga/c-tutor-8&quot;&gt;8. I/O in C&lt;/a&gt; &lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Next tutorial will focused on &lt;a href=&quot;http://yanuartadityan.github.io/waga/c-tutor-6&quot;&gt;user inputs&lt;/a&gt; because so far we’ve just used static variables value. Thus, we should let our C program to be accessible by the users without they change anything inside the code.&lt;/p&gt;


    &lt;p&gt;&lt;a href=&quot;/waga/c-tutor-7/&quot;&gt;C #7 | Pointers&lt;/a&gt; was originally published by Janu Aditya at &lt;a href=&quot;&quot;&gt;Mirkwood Ape&lt;/a&gt; on October 07, 2015.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[C #6 | Arrays]]></title>
  <link rel="alternate" type="text/html" href="/waga/c-tutor-6/" />
  <id>/waga/c-tutor-6</id>
  <published>2015-10-06T00:00:00+02:00</published>
  <updated>2015-10-06T00:00:00+02:00</updated>
  <author>
    <name>Janu Aditya</name>
    <uri></uri>
    <email>yanuart.adityan@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;For the complete list of the tutorial on this blog, you can check these following links:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://yanuartadityan.github.io/tutorial/c-tutor-1&quot;&gt;1. Introduction&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;http://yanuartadityan.github.io/waga/c-tutor-2&quot;&gt;2. First C-Program&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;http://yanuartadityan.github.io/waga/c-tutor-3&quot;&gt;3. Types and Variables&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;http://yanuartadityan.github.io/waga/c-tutor-4&quot;&gt;4. Conditional Statements&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;http://yanuartadityan.github.io/waga/c-tutor-5&quot;&gt;5. Function and Math Operations&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;http://yanuartadityan.github.io/waga/c-tutor-6&quot;&gt;&lt;strong&gt;6. Arrays&lt;/strong&gt;&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;http://yanuartadityan.github.io/waga/c-tutor-7&quot;&gt;7. Pointers&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;http://yanuartadityan.github.io/waga/c-tutor-8&quot;&gt;8. I/O in C&lt;/a&gt; &lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;


    &lt;p&gt;&lt;a href=&quot;/waga/c-tutor-6/&quot;&gt;C #6 | Arrays&lt;/a&gt; was originally published by Janu Aditya at &lt;a href=&quot;&quot;&gt;Mirkwood Ape&lt;/a&gt; on October 06, 2015.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[C #5 | Function & Math Operations]]></title>
  <link rel="alternate" type="text/html" href="/waga/c-tutor-5/" />
  <id>/waga/c-tutor-5</id>
  <published>2015-10-05T00:00:00+02:00</published>
  <updated>2015-10-05T00:00:00+02:00</updated>
  <author>
    <name>Janu Aditya</name>
    <uri></uri>
    <email>yanuart.adityan@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;For the complete list of the tutorial on this blog, you can check these following links:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://yanuartadityan.github.io/tutorial/c-tutor-1&quot;&gt;1. Introduction&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;http://yanuartadityan.github.io/waga/c-tutor-2&quot;&gt;2. First C-Program&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;http://yanuartadityan.github.io/waga/c-tutor-3&quot;&gt;3. Types and Variables&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;http://yanuartadityan.github.io/waga/c-tutor-4&quot;&gt;4. Conditional Statements&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;http://yanuartadityan.github.io/waga/c-tutor-5&quot;&gt;&lt;strong&gt;5. Function and Math Operations&lt;/strong&gt;&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;http://yanuartadityan.github.io/waga/c-tutor-6&quot;&gt;6. Arrays&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;http://yanuartadityan.github.io/waga/c-tutor-7&quot;&gt;7. Pointers&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;http://yanuartadityan.github.io/waga/c-tutor-8&quot;&gt;8. I/O in C&lt;/a&gt; &lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Now that you should have some basic on C, such as variables, data type, basic I/O, and control flow (conditional &amp;amp; loops), this part of the tutorial, we will learn more about function and math operations in C. Some compile-able examples are provided to help you to gain better understanding. We will try to design a C code to compute a math quadratic polynomial with specific inputs.&lt;/p&gt;

&lt;h3 id=&quot;function-in-c&quot;&gt;Function in C&lt;/h3&gt;

&lt;p&gt;Function is a group statements that together they perform a specific task. At least, one function &lt;code&gt;main()&lt;/code&gt;always be found on C program. A programmer can divide his code into separate functions. These functions can be located in different files, later on we will call this source codes. A group of source codes containing independent functions called library.&lt;/p&gt;

&lt;p&gt;The C standard library provides numerous built-in functions that can be called without us defining them. We have used &lt;code&gt;printf()&lt;/code&gt; function so far to let some texts to be displayed. Each built-in functions have specific purposes and mostly, we have to include corresponding header &lt;code&gt;#include &amp;lt;header&amp;gt;&lt;/code&gt; to be able to use the built-in functions.&lt;/p&gt;

&lt;p&gt;We can define our own function that will work depends on how we want them to. However, ones must know the general form of a function within C language.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;n&quot;&gt;return_type&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;function_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg_type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;return_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;return_type&lt;/code&gt; is the type datas of the value that the function will return. In other words, when we call a function &lt;strong&gt;B&lt;/strong&gt; from function &lt;strong&gt;A&lt;/strong&gt;, we’re expecting something happen inside the function &lt;strong&gt;B&lt;/strong&gt; and when the function ends, it has some values that will be used by the calling function &lt;strong&gt;A&lt;/strong&gt;. There are several ways for function &lt;strong&gt;B&lt;/strong&gt; to pass this value to &lt;strong&gt;A&lt;/strong&gt;, but for now we will use &lt;code&gt;return&lt;/code&gt;. If the function does not have any value to return, then the &lt;code&gt;return_type&lt;/code&gt; can be set to &lt;code&gt;void&lt;/code&gt;, &lt;em&gt;e.g&lt;/em&gt;, &lt;code&gt;void main()&lt;/code&gt;. &lt;code&gt;arg_type&lt;/code&gt; defines type of the data for the input arguments, &lt;em&gt;e.g&lt;/em&gt;, int, char, float, etc. It is exactly similar with how you declare a variable in the main code block.&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/801bff698247982f2d20.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;To find a square root product in C, the native built-in function is &lt;code&gt;sqrt()&lt;/code&gt;.To use this function, we must include corresponding library for it in &lt;strong&gt;line:02&lt;/strong&gt;. As you observe the whole codes, we have two additional functions to the &lt;code&gt;main()&lt;/code&gt; function, &lt;code&gt;quadratic()&lt;/code&gt; and &lt;code&gt;squareRoot()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In &lt;strong&gt;line:5&lt;/strong&gt;, on function &lt;code&gt;quadratic()&lt;/code&gt; declaration, it has &lt;code&gt;int&lt;/code&gt; return type because in the application, whenever we call it, we expect the function to return the result of a quadratic computation from variable &lt;code&gt;int a&lt;/code&gt;. Meanwhile, &lt;code&gt;squareRoot()&lt;/code&gt; function has different return type, which is &lt;code&gt;float&lt;/code&gt; because we’re gonna deal with real numbers as a result of square root computation from &lt;code&gt;float b&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Another difference between these two functions, is how the declaration and code blocks are located. &lt;code&gt;quadratic()&lt;/code&gt; function has both declaration and code block located before &lt;code&gt;main()&lt;/code&gt;. The code block spans from &lt;strong&gt;line:6&lt;/strong&gt; to &lt;strong&gt;8&lt;/strong&gt;. While &lt;code&gt;squareRoot()&lt;/code&gt; has been declared before &lt;code&gt;main()&lt;/code&gt; in &lt;strong&gt;line:11&lt;/strong&gt; with the code block is presented after &lt;code&gt;main()&lt;/code&gt; from &lt;strong&gt;line:23&lt;/strong&gt; to &lt;strong&gt;26&lt;/strong&gt;. This will have same result in the end, just matter of preference on how you as the programmer feel comfort with one of them. Please do notice on latter method, you have to write the full function name twice.&lt;/p&gt;

&lt;p&gt;Now, when you started to develop a big C program, probably you will encounter numerous of independent function that needs to be called from different files. Next section will give you the big picture with examples.&lt;/p&gt;

&lt;h3 id=&quot;multiple-source-codes-in-c&quot;&gt;Multiple Source Codes in C&lt;/h3&gt;

&lt;p&gt;Now, let’s split the code into separate files. First, create header &lt;code&gt;source.h&lt;/code&gt; that consist declaration of every functions. Generally, other than the function declarations, macro parameters are found in header as well.&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/8bd26165ecf6b6e9ab3c.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;Afterward, define what will happen inside of each functions on the source file, &lt;code&gt;source.c&lt;/code&gt;. Start by including the header file on top of the code. This is optional actually if you use C99 compiler. If the name of the header and the source (just the name, without file extension) are same, in this case &lt;code&gt;source&lt;/code&gt;, then actually you don’t have to write &lt;code&gt;#include &quot;source.h&quot;&lt;/code&gt; inside &lt;code&gt;source.c&lt;/code&gt;. It will linked automatically thanks to the smart compiler.&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/4f6941f3a7a50fb7d7a7.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;For now, we have fully modular source codes for function &lt;code&gt;quadratic()&lt;/code&gt; and &lt;code&gt;squareRoot()&lt;/code&gt;. As the functions are ready, now other functions can use those functions just by calling the header name. Let’s &lt;code&gt;main()&lt;/code&gt; inside &lt;code&gt;main.c&lt;/code&gt; calls both functions. Keep in mind, that here we assume that all of these files are located in same directory.&lt;/p&gt;

&lt;pre&gt;
+ directory
|__ source.h
|__ source.c
|__ main.c
&lt;/pre&gt;

&lt;p&gt;However, you can also put the source codes inside a directory, &lt;em&gt;e.g.&lt;/em&gt; &lt;code&gt;src&lt;/code&gt; like this,&lt;/p&gt;

&lt;pre&gt;
+ directory
|__ + src
|   |__ source.h
|   |__ source.h
|__ main.c
&lt;/pre&gt;

&lt;p&gt;and modify the &lt;code&gt;main.c&lt;/code&gt; to link to the proper directory of &lt;code&gt;source.h&lt;/code&gt; like this &lt;code&gt;#include &quot;src/source.h&quot;&lt;/code&gt;.&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/765314056037b7a3f37a.js&quot;&gt; &lt;/script&gt;

&lt;h3 id=&quot;compile-multiple-source-files&quot;&gt;Compile Multiple Source Files&lt;/h3&gt;

&lt;p&gt;Allright, so we have &lt;code&gt;source.c&lt;/code&gt; in addition to &lt;code&gt;main.c&lt;/code&gt;. Both have to be compiled in order to make an executable program. As there is a function inside &lt;code&gt;source.c&lt;/code&gt; that is invoked within &lt;code&gt;main.c&lt;/code&gt;, we have to link the corresponding object in compilation. Following command is the fastest and straightforward to generate an executable program named &lt;code&gt;programTest&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;
$ gcc main.c source.c -o programTest
&lt;/pre&gt;

&lt;p&gt;In sort, when the compilation happen, it transforms source code written in C language into some binary codes which known as object code. This object code can only be read by the machine. However, as the compiling process is done, both object files from the sources are deleted and leave only the executable program. Same result can also be achieved using a method that compiles each source files separately to retain the object files.&lt;/p&gt;

&lt;pre&gt;
$ gcc -c source.c
$ gcc -c main.c
$ gcc source.o main.o -o programTest
&lt;/pre&gt;

&lt;p&gt;This second method will give you two object files &lt;code&gt;*.o&lt;/code&gt;. Then the third line will link both of them to become an executable program named &lt;code&gt;programTest&lt;/code&gt;. Now, when there is a modifincation on certain file, &lt;em&gt;e.g.&lt;/em&gt;, &lt;code&gt;source.c&lt;/code&gt;, then we have to update the object file of &lt;code&gt;source.o&lt;/code&gt;, thus we just need to compile the corresponding source to update the object code.&lt;/p&gt;

&lt;pre&gt;
$ gcc -c source.c
$ gcc source.o main.o -o programTest
&lt;/pre&gt;

&lt;p&gt;Note that &lt;code&gt;main.c&lt;/code&gt; does not need to be compiled. Thus, time to rebuild the whole program is much shorter considering that probably we’ll gonna have much more source codes than our circumstance right now.&lt;/p&gt;

&lt;h3 id=&quot;arithmetic-operators&quot;&gt;Arithmetic Operators&lt;/h3&gt;

&lt;p&gt;C programming language contains some mathematical operators. All of the arithmetic operators are shown on table below. Assume that two variables are given, &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt; with assigned values are 10 and 5 respectively. These two variables are called operands. From the table you can find the result from each operations.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;&lt;strong&gt;symbols&lt;/strong&gt;&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;&lt;strong&gt;functions&lt;/strong&gt;&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;&lt;strong&gt;results&lt;/strong&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;+&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;adding two operands&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;A + B equals to 15&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;subtract two operands&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;A - B equals to 5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;*&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;multiply two operands&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;A * B equals to 50&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;/&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;divide two operands&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;A / B equals to 2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;%&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;modulus, remainder&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;A % B equals to 0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;++&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;increment, increase value&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;A++ will give 11&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;–&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;decrement, decrease value&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;B– will give 4&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Keep in mind that each operations can be used to form more complex calculations and over time, performance of your C codes is judged by how efficient the design of algorithm on C level. Now, let’s write a function to compute some practical math problems.&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align*}
	&amp; y = x^2 + x + 5
\end{align*} %]]&gt;&lt;/script&gt;

&lt;p&gt;We have a quadratic polynomial function that takes &lt;code&gt;x&lt;/code&gt; as an input and store the result on &lt;code&gt;y&lt;/code&gt;. The value of &lt;code&gt;x&lt;/code&gt; can be arbitrary, thus we would like to use &lt;code&gt;float x&lt;/code&gt; and store the output to &lt;code&gt;float y&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We can initiate the function, let’s call it &lt;code&gt;polyQuadratic&lt;/code&gt;. It will take &lt;code&gt;float x&lt;/code&gt; as an input and return a float value, thus the function itself has to be declared using float data type.&lt;/p&gt;

&lt;p&gt;Let’s add the function into &lt;code&gt;source.h&lt;/code&gt; where two previous functions exist.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;polyQuadratic&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The computation itself requires a quadratic operation and addition. For the quadratic, let’s utilise already defined &lt;code&gt;quadratic()&lt;/code&gt; function. However, we will encounter an issue here because of the difference on data type between return value of &lt;code&gt;quadratic()&lt;/code&gt; which is integer and the input data, which is &lt;code&gt;float x&lt;/code&gt;. However, such this problem, can be solved using casting. The compiler will automatically change one type of data into another if it makes sense. For instance, if you assign an integer value to a floating-point variable, the compiler will insert code to convert the &lt;code&gt;int&lt;/code&gt; to a &lt;code&gt;float&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;polyQuadratic&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quadratic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The idea is, as &lt;code&gt;quadratic()&lt;/code&gt; takes an integer input, while the input here is &lt;code&gt;float&lt;/code&gt;, we have to tell compiler to assume that it is an integer. Thus, &lt;code&gt;(int)x&lt;/code&gt; will cast &lt;code&gt;float x&lt;/code&gt; into something similar with &lt;code&gt;int x&lt;/code&gt;. But you should be warned that the value of &lt;code&gt;float&lt;/code&gt; will be rounded to closest decimal. Second implementation of casting here is to cast return value of &lt;code&gt;quadratic()&lt;/code&gt; to &lt;code&gt;float&lt;/code&gt; although it is not necessary. An integer value doesn’t need a casting if it is gonna be used with float numbers. You will get some potential warning from the compiler though.&lt;/p&gt;

&lt;p&gt;You can check the final &lt;code&gt;sourceModified.h&lt;/code&gt;, &lt;code&gt;sourceModified.c&lt;/code&gt; and &lt;code&gt;main.c&lt;/code&gt; below.&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/89cc6dc613a569d46ad1.js&quot;&gt; &lt;/script&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/171211924000e11e8cf1.js&quot;&gt; &lt;/script&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/a09ab012f83eb6cb40ce.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;The &lt;code&gt;x&lt;/code&gt; as the input for the equation should be arbitrary. However, for the simplicity 5 is just the value that pops out in my head. Thus, &lt;code&gt;y&lt;/code&gt; value after computation should be 35.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;welcome&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;simplest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;example&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ever&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;calculate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;000000&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;entering&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;box&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;we&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ve&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;got&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;now!&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;35&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;000000&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Next, we will learn about how C stores sequences of same element datas, known as &lt;a href=&quot;http://yanuartadityan.github.io/waga/c-tutor-6&quot;&gt;array&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Cheers!&lt;/p&gt;


    &lt;p&gt;&lt;a href=&quot;/waga/c-tutor-5/&quot;&gt;C #5 | Function &amp; Math Operations&lt;/a&gt; was originally published by Janu Aditya at &lt;a href=&quot;&quot;&gt;Mirkwood Ape&lt;/a&gt; on October 05, 2015.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[C #4 | Conditional Statement]]></title>
  <link rel="alternate" type="text/html" href="/waga/c-tutor-4/" />
  <id>/waga/c-tutor-4</id>
  <published>2015-10-04T00:00:00+02:00</published>
  <updated>2015-10-04T00:00:00+02:00</updated>
  <author>
    <name>Janu Aditya</name>
    <uri></uri>
    <email>yanuart.adityan@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;For the complete list of the tutorial on this blog, you can check these following links:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://yanuartadityan.github.io/tutorial/c-tutor-1&quot;&gt;1. Introduction&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;http://yanuartadityan.github.io/waga/c-tutor-2&quot;&gt;2. First C-Program&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;http://yanuartadityan.github.io/waga/c-tutor-3&quot;&gt;3. Types and Variables&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;http://yanuartadityan.github.io/waga/c-tutor-4&quot;&gt;&lt;strong&gt;4. Conditional Statements&lt;/strong&gt;&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;http://yanuartadityan.github.io/waga/c-tutor-5&quot;&gt;5. Function and Math Operations&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;http://yanuartadityan.github.io/waga/c-tutor-6&quot;&gt;6. Arrays&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;http://yanuartadityan.github.io/waga/c-tutor-7&quot;&gt;7. Pointers&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;http://yanuartadityan.github.io/waga/c-tutor-8&quot;&gt;8. I/O in C&lt;/a&gt; &lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;One of the most important ability of programmer is to how to handle flow of the program. This includes how the program takes decision when there is a conditional statement. The &lt;code&gt;if&lt;/code&gt; statement in C is used to check the certain conditions and will proceed to the next action if the result is true. For example, you want your code to execute a computation if a variable &lt;code&gt;x&lt;/code&gt; is bigger than &lt;code&gt;y&lt;/code&gt; value. If &lt;code&gt;y&lt;/code&gt; value is smaller than &lt;code&gt;x&lt;/code&gt;, then the condition is not fulfilled and the flow of the codes will be redirected to a different branch.&lt;/p&gt;

&lt;p&gt;In this tutorial, we will learn about relational operations within C programming language and use them to determine the outcome of a certain condition.&lt;/p&gt;

&lt;h3 id=&quot;logical-operators&quot;&gt;Logical Operators&lt;/h3&gt;

&lt;p&gt;A &lt;code&gt;true&lt;/code&gt; statement is one that evaluates to a non zero number, while &lt;code&gt;false&lt;/code&gt; is always represented by zero number. When we’re dealing with relational or operators, the operator will return 1 if the comparison is true, and return 0 if comparison is false.&lt;/p&gt;

&lt;p&gt;Here are listed relational operators available in C:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;&lt;strong&gt;preprocessors&lt;/strong&gt;&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;&lt;strong&gt;definition&lt;/strong&gt;&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;&lt;strong&gt;usage example&lt;/strong&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&amp;gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;greater than&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code&gt;if (3&amp;gt;2)&lt;/code&gt; is true&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&amp;lt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;less than&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code&gt;if (2&amp;lt;3)&lt;/code&gt; is true&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&amp;gt;=&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;greater than or equal&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code&gt;if (4&amp;gt;=4)&lt;/code&gt; is true&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&amp;lt;=&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;less than or equal&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code&gt;if (5&amp;lt;=5)&lt;/code&gt; is true&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;==&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;equal&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code&gt;if (2==2)&lt;/code&gt; is true&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;!=&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;not equal&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code&gt;if (10!=5)&lt;/code&gt; is true&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Now let’s use those operators in conditional statements.&lt;/p&gt;

&lt;h3 id=&quot;conditional-statements-if&quot;&gt;Conditional Statements: IF&lt;/h3&gt;

&lt;p&gt;The structure of an if statement in C is as follows:&lt;/p&gt;

&lt;pre&gt;
if (statement is true)
	execute this line of code
&lt;/pre&gt;

&lt;p&gt;or if you have more than one line of codes, now we called it a compound of a statement, or in sort, a block. This block is in between braces &lt;code&gt;{}&lt;/code&gt;.article-wrap&lt;/p&gt;

&lt;pre&gt;
if (statements is true)
{
	execute these lines of code
}
&lt;/pre&gt;

&lt;p&gt;Now, given &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;, we want to print out something using &lt;code&gt;printf()&lt;/code&gt; function, if &lt;code&gt;x&lt;/code&gt; value is bigger than &lt;code&gt;y&lt;/code&gt;, thus the example C codes will be:&lt;/p&gt;

&lt;pre&gt;
if (x &amp;gt; y)
{
	/* comment lines do not count as code line,
	   thus braces are optional */
	printf(&quot;Yeah, we have x that is bigger than y\n&quot;);
}

/* lines after */
...
&lt;/pre&gt;

&lt;p&gt;As commented inside the code snippet above, whenever &lt;code&gt;x&lt;/code&gt; value is bigger than &lt;code&gt;y&lt;/code&gt;, then the program flow will execute the code block inside. However, if the conditional statement returns false, then the program flow will ignore the code block and execute lines after.&lt;/p&gt;

&lt;h3 id=&quot;conditional-statements-else&quot;&gt;Conditional Statements: ELSE&lt;/h3&gt;

&lt;p&gt;So when the condition in an &lt;code&gt;if&lt;/code&gt; statement returns a false value, we can redirect the program to execute different block of codes instead of the code executed when the statement evaluates to true. The &lt;code&gt;else&lt;/code&gt; statement means that whatever code after it (whether a single line or code between brackets) is executed if the &lt;code&gt;if&lt;/code&gt; statement is false.&lt;/p&gt;

&lt;p&gt;In C codes, &lt;code&gt;if&lt;/code&gt; and &lt;code&gt;else&lt;/code&gt; implementation will look like this:&lt;/p&gt;

&lt;pre&gt;
if (TRUE)
{
	/* executes this code block if true */
}
else
{
	/* otherwise execute this code block if false */
}
&lt;/pre&gt;

&lt;h3 id=&quot;multiple-conditional-statements-else-if&quot;&gt;Multiple Conditional Statements: ELSE IF&lt;/h3&gt;

&lt;p&gt;Sometimes, when there are multiple conditional statements that all of them probably will be evaluated as true, but you want only the code block from the first conditional statement that will be executed. On in other words, if the first &lt;code&gt;if&lt;/code&gt; conditional statement is true, then the program will immediately execute corresponding code block, if not then it goes to the second conditional statement, which uses &lt;code&gt;else if&lt;/code&gt;. If it is evaluated as a true result, then &lt;code&gt;else&lt;/code&gt; will be ignored and the program will execute second code block. If not, then the program will go to the last code block related to the &lt;code&gt;else&lt;/code&gt; conditional.&lt;/p&gt;

&lt;p&gt;Check this complete example to get a grasp on this conditional statement tutorial:&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/12f7eb68ef47d6367520.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;The result of this quite concise example with &lt;code&gt;MYAGE&lt;/code&gt; macro variable 25 years old will be like this:&lt;/p&gt;

&lt;pre&gt;
you&#39;re just 25? You&#39;re young!
&lt;/pre&gt;

&lt;p&gt;Then, change &lt;code&gt;MYAGE&lt;/code&gt; value to 30 years old, and the result will be:&lt;/p&gt;

&lt;pre&gt;
you&#39;re 30! you&#39;re in a perfect shape!
&lt;/pre&gt;

&lt;p&gt;And lastly, let’s assume that this guy is 59 years old. Then the result will be:&lt;/p&gt;

&lt;pre&gt;
well, at 59, you&#39;re quite old!
&lt;/pre&gt;

&lt;p&gt;If you feel you already got some basics on conditional statements, then later on there will be an advanced flow control, &lt;em&gt;e.g&lt;/em&gt; for-loops and do-while. We will learn this later on.&lt;/p&gt;

&lt;p&gt;For now, let’s proceed onto tutorial about how to deal with multiple functions, how to organize them and how to compile them in &lt;a href=&quot;http://yanuartadityan.github.io/waga/c-tutor-5&quot;&gt;next tutorial&lt;/a&gt;.&lt;/p&gt;


    &lt;p&gt;&lt;a href=&quot;/waga/c-tutor-4/&quot;&gt;C #4 | Conditional Statement&lt;/a&gt; was originally published by Janu Aditya at &lt;a href=&quot;&quot;&gt;Mirkwood Ape&lt;/a&gt; on October 04, 2015.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[C #3 | Types and Variables]]></title>
  <link rel="alternate" type="text/html" href="/waga/c-tutor-3/" />
  <id>/waga/c-tutor-3</id>
  <published>2015-10-04T00:00:00+02:00</published>
  <updated>2015-10-04T00:00:00+02:00</updated>
  <author>
    <name>Janu Aditya</name>
    <uri></uri>
    <email>yanuart.adityan@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;For the complete list of the tutorial on this blog, you can check these following links:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://yanuartadityan.github.io/tutorial/c-tutor-1&quot;&gt;1. Introduction&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;http://yanuartadityan.github.io/waga/c-tutor-2&quot;&gt;2. First C-Program&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;http://yanuartadityan.github.io/waga/c-tutor-3&quot;&gt;&lt;strong&gt;3. Types and Variables&lt;/strong&gt;&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;http://yanuartadityan.github.io/waga/c-tutor-4&quot;&gt;4. Conditional Statements&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;http://yanuartadityan.github.io/waga/c-tutor-5&quot;&gt;5. Function and Math Operations&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;http://yanuartadityan.github.io/waga/c-tutor-6&quot;&gt;6. Arrays&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;http://yanuartadityan.github.io/waga/c-tutor-7&quot;&gt;7. Pointers&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;http://yanuartadityan.github.io/waga/c-tutor-8&quot;&gt;8. I/O in C&lt;/a&gt; &lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;As we start working on every programming languages, we will encounter datas. Each programming languages have different approach on how to store and manipulate datas. C for example, it is known for quite strict on data types, due to the native environment of C that is often considered low-level compared to &lt;code&gt;Python&lt;/code&gt;, &lt;code&gt;Ruby&lt;/code&gt; or even &lt;code&gt;Java&lt;/code&gt;. Without understanding data types on C, it can lead into a situation where ‘supposed-to-be-efficient’ code becomes ‘resource-consuming’ code. It is certainly an opposite of the motivation people use C at the beginning, to build fast, small and efficient program. Even, unwanted issues that should be hindered, &lt;em&gt;e.g.&lt;/em&gt;, buffer overrun, memory leaks, or segmentation fault could be there causing potential bugs.&lt;/p&gt;

&lt;h3 id=&quot;variables&quot;&gt;Variables&lt;/h3&gt;

&lt;p&gt;Variables or the basic data objects in a program, allow programmers to store datas such as integer values, string characters and floating points (real numbers). A variable tells the compiler how much the storage should be created in memory to store datas. A variable can be composed of letters, no matter whether it is in uppercase or lowercase letters. Also digits and underscore can be put upon a variable name. In C-programming, variables have to be declared first before you can using it.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;lineno&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* declarations */&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 2&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 3&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 4&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 5&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt; 6&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* declaration with initiation */&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 7&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;X&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 8&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt; 9&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* definition */&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numX&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;11&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;12&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;13&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;3.14159625&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;14&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Variable name can be composed of letters (both uppercase and lowercase letters), digits and underscore ‘_’ only. However, it is discouraged to use underscore as first letter on variable name even though it is permittable and legal. Just keep in mind, that some system and compiler specific names also uses variable with underscore as the first letter, thus it can become an unwanted conflict.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;line:01&lt;/strong&gt; and &lt;strong&gt;line:02&lt;/strong&gt; show two instances of variable declaration. Both variables are &lt;code&gt;integer&lt;/code&gt; type. This means each of &lt;code&gt;numX&lt;/code&gt; and &lt;code&gt;numY&lt;/code&gt; will use 4 bytes in memory, as once those variables are declared, 32 bits (for each) is allocated to store the value. In integer, with 32 bits of length, there are 4,294,967,296 decimal values that can be computed. The minimal and maximal value however, will start from -2,147,483,648 and end at 2,147,483,647. If you are confident enough that your data values will never become negative integer, then you can initiate an &lt;code&gt;unsigned integer&lt;/code&gt; to make the value start from zero and end at 4,294,967,295.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;float&lt;/code&gt; variable in &lt;strong&gt;line:04&lt;/strong&gt; are the numeric constants that has either fractional form or exponent form. This type of data store a floating point value in single precision (32 bits). An example, &lt;code&gt;float pi = 3.14159265;&lt;/code&gt;, will let the system to have Phi value stored as floating point. The accuracy of floating point however, is something that still be quite problematic for some programmers. Some certain value will be rounded here and there to get closest representation. The fact about floating point is that it can’t represent precisely all real numbers, thus for a highly critical computation that requires very precise numbers, this problem can be circumvented by utilising &lt;code&gt;double&lt;/code&gt; precision (64 bits) data type or with help from &lt;code&gt;long&lt;/code&gt; type modifier.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;line:05&lt;/strong&gt; shows &lt;code&gt;char&lt;/code&gt; variable that store single character which is typically 8 bits in size. A char can be assigned a signed value between -128 to 127, an unsigned value between 0 to 255 or a single quoted ASCII character, &lt;em&gt;e.g.&lt;/em&gt; &lt;code&gt;char text = &quot;X&quot;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/IEEE_754-2008&quot;&gt;More&lt;/a&gt; about floating points…&lt;/p&gt;

&lt;h3 id=&quot;type-modifiers&quot;&gt;Type Modifiers&lt;/h3&gt;

&lt;p&gt;A compiler defines whether the default is signed or unsigned, so to be safe you should declare which type you want to use. Still, using signed or unsigned modifiers to a type data, &lt;em&gt;e.g.&lt;/em&gt; integer, will not change the size of the variable inside the memory. An integer stays 32 bit no matter it is signed or unsigned. Since introduction of &lt;a href=&quot;https://en.wikipedia.org/wiki/C99&quot;&gt;C99&lt;/a&gt;, the newest C-programming language standard, modifier &lt;code&gt;long&lt;/code&gt; is supported to enhance the precision of integer, float and double.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/* OK */&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4294967295&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 	

&lt;span class=&quot;cm&quot;&gt;/* overflow problem */&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4294967296&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/* OK */&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4294967296&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Another modifier, &lt;code&gt;const&lt;/code&gt; will let the corresponding variable fixed throughout the runtime.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/* declare A and init the value */&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/* try to overwrite A with new value */&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/* check the result */&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;%d&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Still there are more modifiers in C99 standard, but we are not gonna look for it too deep for now. However, C can be quite demanding on how it stores the datas. This required more knowledge in order to master for ones to get the most of the C.&lt;/p&gt;

&lt;h3 id=&quot;a-good-example&quot;&gt;A Good Example&lt;/h3&gt;

&lt;p&gt;Here, an example that contains everything, from comments, macro variables, signed versus unsigned integers, and simple implementation of format tag inside &lt;code&gt;printf&lt;/code&gt;.&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/575de6ff4302449a1a7a.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;Basically, the code tells you to assign maximum signed integer value to &lt;code&gt;a&lt;/code&gt;, and &lt;code&gt;b&lt;/code&gt; will have the minimum signed integer value. Afterward, by adding one decimal to &lt;code&gt;a&lt;/code&gt; is enough to let an overflow happens. When an overflow happens, the value of &lt;code&gt;a&lt;/code&gt; will be wrapped around to the minimum one, or equal to current &lt;code&gt;b&lt;/code&gt; value. The workaround for this is to use unsigned integer, demonstrated by variable &lt;code&gt;c&lt;/code&gt;. You can expect the output of code above to be shown like this,&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2147483647&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2147483648&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;one&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;decimal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2147483648&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;signed&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;decimal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2147483648&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;decimal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2147483648&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you haven’t understand the idea of comment or &lt;code&gt;printf&lt;/code&gt;, you can check my &lt;a href=&quot;http://yanuartadityan.github.io/waga/c-tutor-2&quot;&gt;previous&lt;/a&gt; tutorial. On the next tutorial, we will learn on how to perform &lt;a href=&quot;http://yanuartadityan.github.io/waga/c-tutor-4&quot;&gt;conditional statements&lt;/a&gt; on C.&lt;/p&gt;


    &lt;p&gt;&lt;a href=&quot;/waga/c-tutor-3/&quot;&gt;C #3 | Types and Variables&lt;/a&gt; was originally published by Janu Aditya at &lt;a href=&quot;&quot;&gt;Mirkwood Ape&lt;/a&gt; on October 04, 2015.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[C #2 | The First Program]]></title>
  <link rel="alternate" type="text/html" href="/waga/c-tutor-2/" />
  <id>/waga/c-tutor-2</id>
  <published>2015-10-03T00:00:00+02:00</published>
  <updated>2015-10-03T00:00:00+02:00</updated>
  <author>
    <name>Janu Aditya</name>
    <uri></uri>
    <email>yanuart.adityan@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;For the complete list of the tutorial on this blog, you can check these following links:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://yanuartadityan.github.io/tutorial/c-tutor-1&quot;&gt;1. Introduction&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;http://yanuartadityan.github.io/waga/c-tutor-2&quot;&gt;&lt;strong&gt;2. First C-Program&lt;/strong&gt;&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;http://yanuartadityan.github.io/waga/c-tutor-3&quot;&gt;3. Types and Variables&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;http://yanuartadityan.github.io/waga/c-tutor-4&quot;&gt;4. Conditional Statements&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;http://yanuartadityan.github.io/waga/c-tutor-5&quot;&gt;5. Function and Math Operations&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;http://yanuartadityan.github.io/waga/c-tutor-6&quot;&gt;6. Arrays&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;http://yanuartadityan.github.io/waga/c-tutor-7&quot;&gt;7. Pointers&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;http://yanuartadityan.github.io/waga/c-tutor-8&quot;&gt;8. I/O in C&lt;/a&gt; &lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Wise and experienced programmers will always tell you this, &lt;em&gt;the only way to learn a programming language is to write programs&lt;/em&gt;. It is true and I will just jumpstart by creating the very first simple C program. This program will simply prints some words, and play with how to bring the texts appear on the screen with &lt;code&gt;printf&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;First thing to know is that, C-language are written in &lt;code&gt;.c&lt;/code&gt; and &lt;code&gt;.h&lt;/code&gt; file extensions. &lt;code&gt;.c&lt;/code&gt; is the compile-able file that consist every functions and routines while &lt;code&gt;.h&lt;/code&gt; is where you stores function names, variables, headers etc. You can live with &lt;code&gt;.c&lt;/code&gt; alone but sometimes in order for programmer to be able to hide the intellectual property of, &lt;em&gt;e.g&lt;/em&gt; the functions inside &lt;code&gt;.c&lt;/code&gt;, programmers  merely write the function name inside &lt;code&gt;.h&lt;/code&gt; and let the compiler transform &lt;code&gt;.c&lt;/code&gt; with the definition of the function into either static or dynamic &lt;em&gt;library&lt;/em&gt;. Thus, everyone who wants to use corresponding function, they will be provided by just the &lt;code&gt;.h&lt;/code&gt; and the library, without requiring them to have the original &lt;code&gt;.c&lt;/code&gt; code.&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/300a69849266f41b58c9.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;&lt;strong&gt;line:01&lt;/strong&gt; demonstrates the use of a &lt;code&gt;#&lt;/code&gt; preprocessor. A preprocessor provides the ability for the inclusion of header files, macro expansions, conditional compilation, and line control. In many C implementations, it is a separate program invoked by the compiler as the first part of translation. &lt;a href=&quot;https://en.wikipedia.org/wiki/C_preprocessor&quot;&gt;Check…&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Preprocessor is a separate step in the compilation process, thus is not part of the compiler. If you invoke a preprocessor in C, it will substitute the text with the one that is referred by the preprocessor, whether it is a macro function or a file header. Here a list of preprocessor that will be used frequently on this tutorial.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;&lt;strong&gt;preprocessors&lt;/strong&gt;&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;&lt;strong&gt;definition&lt;/strong&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;#define&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;substitutes a preprocessor macro&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;#include&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;insert a particular header from file&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;#if&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;test if a compile time condition is satisfied (true)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;#else&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;alternative branch if #if does not satisfied the condition&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;#endif&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;end preprocessor conditional&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;#pragma&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;method to provide additional information to the compiler&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;line:03&lt;/strong&gt; is where you can find the first function called &lt;code&gt;main&lt;/code&gt;. A bracket &lt;code&gt;()&lt;/code&gt; after the function name collects the argument. Empty bracket means no argument passed onto the function.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;line:04&lt;/strong&gt; and &lt;strong&gt;line:08&lt;/strong&gt; contain the function braces &lt;code&gt;{}&lt;/code&gt;. Statements of a function are enclosed in braces. &lt;code&gt;{&lt;/code&gt; begins the statements and &lt;code&gt;}&lt;/code&gt; ends the statements.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;line:05&lt;/strong&gt; shows the invocation of function &lt;code&gt;printf&lt;/code&gt; and an argument &lt;code&gt;&quot;Hi, world\n&quot;&lt;/code&gt;. This function is called from the library &lt;code&gt;stdio.h&lt;/code&gt; that is described from &lt;strong&gt;line:01&lt;/strong&gt;. &lt;code&gt;printf&lt;/code&gt; prints output to the screen, in this case, strings from our argument between quotes &lt;code&gt;&quot; &quot;&lt;/code&gt;. &lt;code&gt;\n&lt;/code&gt; tells &lt;code&gt;printf&lt;/code&gt; to give a newline after printing the argument.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;line:07&lt;/strong&gt; with &lt;code&gt;return&lt;/code&gt; statement terminates the execution. However, as the name implies, &lt;code&gt;return&lt;/code&gt; gives certain value back to the calling function. If you call a function A within function &lt;code&gt;main&lt;/code&gt;, and you invoke &lt;code&gt;return value&lt;/code&gt; from within A, then &lt;code&gt;main&lt;/code&gt; will get the value that computed inside A. More detailed about return statement can be found on &lt;a href=&quot;https://en.wikipedia.org/wiki/Return_statement&quot;&gt;Wiki&lt;/a&gt; page.&lt;/p&gt;

&lt;h3 id=&quot;how-to-comments&quot;&gt;How to Comments&lt;/h3&gt;

&lt;p&gt;When you put some information inside &lt;code&gt;/*&lt;/code&gt; and &lt;code&gt;*/&lt;/code&gt;, you just made a comment. This is what we called with multi-line comment, or sometimes also called a block comment. Comments are used by the programmers to explain functionality of certain parts of codes, or to keep notes for themselves.&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/b3dc562143a8497a0dee.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;On &lt;strong&gt;line:01&lt;/strong&gt;, it shows how block comment works. Any characters between &lt;code&gt;/*&lt;/code&gt; and &lt;code&gt;*/&lt;/code&gt; are ignored by the compiler. On &lt;strong&gt;line:9&lt;/strong&gt; and &lt;strong&gt;10&lt;/strong&gt;, a single line comments are provided. A single line comment starts with &lt;code&gt;//&lt;/code&gt; and everything after it is ignored by the compiler until end of the line. This is originated from C++ style comment, but nowadays most of C compilers support this comment.&lt;/p&gt;

&lt;h3 id=&quot;quick-explanation-on-printf&quot;&gt;Quick Explanation on printf()&lt;/h3&gt;

&lt;p&gt;Originall, &lt;code&gt;printf()&lt;/code&gt; is declared with,&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;format&lt;/code&gt; in here is the string that contains the text to be displayed. In sort, this is the text you wanted to see. It can be accompanied by the variables. An example of &lt;code&gt;printf(&quot;Hi World&quot;)&lt;/code&gt; will bring texts “Hi World” to be displayed on terminal. You can add format tags to determine data types, and point it out to the corresponding variables. If you have &lt;code&gt;int a&lt;/code&gt; and want to show it after “Hi World”, then the command will be &lt;code&gt;printf(&quot;Hi World %d&quot;, a)&lt;/code&gt;. The tag is &lt;code&gt;%&lt;/code&gt;, and &lt;code&gt;d&lt;/code&gt; represents signed decimal integer. &lt;code&gt;%f&lt;/code&gt; is format tag for floating point data type, &lt;code&gt;%s&lt;/code&gt; for characters, and &lt;code&gt;%x&lt;/code&gt; for hexadecimal integer. To check all of available format tags for C, you can see it &lt;a href=&quot;http://www.tutorialspoint.com/c_standard_library/c_function_printf.htm&quot;&gt;here&lt;/a&gt;. For the tutorial about variables, please refer to the end of this tutorial.&lt;/p&gt;

&lt;h3 id=&quot;spaces-on-c&quot;&gt;Spaces on C&lt;/h3&gt;

&lt;p&gt;Also, one thing to notice about C-syntax is, it does not care about spaces.&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/9b9901f6c2fcca06851b.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;Those lines will resulted on same result with previous codes. But, remember humans will read your codes as well. So, keep it mind to make readable codes for your colleagues, friend or bosses.&lt;/p&gt;

&lt;h3 id=&quot;how-to-run-c-program&quot;&gt;How to Run C-program&lt;/h3&gt;

&lt;p&gt;In order to execute a C program, we have to make sure &lt;code&gt;main()&lt;/code&gt; function does exist in our code. For now, it is located in &lt;code&gt;main.c&lt;/code&gt; C file. Then, there are two important steps to make it executable, by compiling and linking.&lt;/p&gt;

&lt;p&gt;Nowadays, there are lot of GUI (Graphical User Interface) development tools available for you to use. If you are full time Windows user, then probably most of the time you will use &lt;a href=&quot;https://www.visualstudio.com&quot;&gt;Visual Studio&lt;/a&gt;. For Mac, &lt;a href=&quot;https://developer.apple.com/xcode/&quot;&gt;Xcode&lt;/a&gt; probably is the best IDE (Integrated Development Environment) to use. UNIX based users probably know how good &lt;a href=&quot;https://eclipse.org/cdt/&quot;&gt;Eclipse CDT&lt;/a&gt; is, probably also considered as IDE with the most complete features yet. Still, there are many 3rd party IDEs out there for everyone to check. But, one thing to notice here is, every operating systems and IDE has different C standard and thus, sometimes you have to design cross-platform friendly codes if you want your code to be executable (compile-able) in different platforms. However, you’ll gonna deal with specific platform dependancies that probably will hinder you from working efficiently. Myself, I’d rather stick with UNIX C standard (C99) as I’m using Mac OSX. I’m using GCC as my compiler and it comes as native compiler in most of UNIX based operating systems like Linux. GCC is also available in Windows with help of &lt;a href=&quot;http://www.mingw.org&quot;&gt;MinGW&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;By using IDEs, programmers do not need to bring down their feet into command line and deal with manual compilation. But, ones should understand that GUI based IDEs are basically using same commands with automation. Also, on learning phase, compiling using command line compiler will let you learn how units of code are compiled, linked and mapped together. You have to tell explicitely compiler which files to compile and library to link. You will gain better understanding on how your whole program works. An IDE will save you lot of time, but probably if you’re still learning, then it will keep you ignorant and that’s something that we don’t want you to become.&lt;/p&gt;

&lt;p&gt;You then take it a step further and learn to create your own make-file. This is a valuable skill. Your make-file makes the build cycle approach the convenience of “IDE magic” while still retaining full understanding and learning. There will be a specific tutorial for makefile, however if you want to jump as soon as possible, please check &lt;a href=&quot;http://mrbook.org/blog/tutorials/make/&quot;&gt;Makefile&lt;/a&gt; guide.&lt;/p&gt;

&lt;h3 id=&quot;how-to-compile&quot;&gt;How to Compile&lt;/h3&gt;

&lt;p&gt;We’re gonna use &lt;code&gt;gcc&lt;/code&gt; for all of the compilation. &lt;code&gt;gcc&lt;/code&gt; is the C and C++ compiler developed by GNU project. It is widely used as the default compiler of UNIX-like systems. If you are using Mac, you may get it automatically installed by installing Xcode Command Line Tools.&lt;/p&gt;

&lt;p&gt;Open command line or terminal if you’re using Mac, and navigate to your source codes directory. First, check whether you have &lt;code&gt;gcc&lt;/code&gt; installed or not.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
$ gcc --version
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If you’re using Mac OSX (Yosemite or later), most of the chance you will have this result instead,&lt;/p&gt;

&lt;pre&gt;
Configured with: --prefix=/Applications/Xcode.app/Contents/Developer/usr --with-gxx-include-dir=/usr/include/c++/4.2.1
Apple LLVM version 7.0.0 (clang-700.0.72)
Target: x86_64-apple-darwin15.0.0
Thread model: posix
&lt;/pre&gt;

&lt;p&gt;This is because from Mac OSX 10.9 onwards, the &lt;code&gt;gcc&lt;/code&gt; that came has &lt;code&gt;LLVM clang&lt;/code&gt; as back-end, still we can use &lt;code&gt;gcc&lt;/code&gt; command for general compilation.&lt;/p&gt;

&lt;p&gt;To compile &lt;code&gt;main.c&lt;/code&gt; to get executable program &lt;code&gt;myapp&lt;/code&gt;, then the &lt;code&gt;gcc&lt;/code&gt; or &lt;code&gt;clang&lt;/code&gt; command will be,&lt;/p&gt;

&lt;pre&gt;
$ gcc main.c -o myapp
&lt;/pre&gt;

&lt;p&gt;To execute the program &lt;code&gt;myapp&lt;/code&gt;, you can type&lt;/p&gt;

&lt;pre&gt;
$ ./myapp
&lt;/pre&gt;

&lt;p&gt;And this result will appear,&lt;/p&gt;

&lt;pre&gt;
Hi World
&lt;/pre&gt;

&lt;p&gt;If you’re dealing with compiling multiple file sources, then refer to &lt;a href=&quot;http://yanuartadityan.github.io/waga/c-tutor-5&quot;&gt;Tutorial 5&lt;/a&gt; which talks about functions in C.&lt;/p&gt;

&lt;p&gt;Next, we will go through the basic but one of the core in C, &lt;a href=&quot;http://yanuartadityan.github.com/tutorial/c-tutor-3&quot;&gt;variables and data types&lt;/a&gt;.&lt;/p&gt;


    &lt;p&gt;&lt;a href=&quot;/waga/c-tutor-2/&quot;&gt;C #2 | The First Program&lt;/a&gt; was originally published by Janu Aditya at &lt;a href=&quot;&quot;&gt;Mirkwood Ape&lt;/a&gt; on October 03, 2015.&lt;/p&gt;
  </content>
</entry>

</feed>
